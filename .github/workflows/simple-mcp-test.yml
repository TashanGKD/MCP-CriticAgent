name: 🧪 Complete MCP Tool Testing

on:
  workflow_dispatch:
    inputs:
      github_url:
        description: '🎯 GitHub URL of the MCP tool to test'
        required: true
        default: 'https://github.com/upstash/context7'

jobs:
  test-mcp-tool:
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    env:
      # AI模型配置
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
      DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
      DASHSCOPE_BASE_URL: ${{ secrets.DASHSCOPE_BASE_URL }}
      DASHSCOPE_MODEL: ${{ secrets.DASHSCOPE_MODEL }}
      
      # Supabase数据库配置
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      
    - name: Install dependencies
      run: uv sync
        
    - name: 🧪 Complete MCP Tool Testing
      id: test_mcp
      run: |
        GITHUB_URL="${{ github.event.inputs.github_url }}"
        
        echo "🎯 开始完整 MCP 工具测试"
        echo "📍 测试URL: $GITHUB_URL"
        echo "🤖 智能测试模式: 已启用"
        echo "⏱️ 超时时间: 600秒"
        
        # 检查AI配置
        if [ -n "$OPENAI_API_KEY" ] || [ -n "$DASHSCOPE_API_KEY" ]; then
          echo "✅ AI配置已检测到，将使用智能测试模式"
          USE_SMART="--smart"
        else
          echo "⚠️ 未检测到AI配置，使用基础测试模式"
          USE_SMART=""
        fi
        
        # 检查数据库配置
        if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_ROLE_KEY" ]; then
          echo "✅ Supabase数据库配置已检测到，将启用数据库存储"
          DATABASE_ENABLED="true"
        else
          echo "⚠️ 未检测到Supabase配置，跳过数据库存储"
          DATABASE_ENABLED="false"
        fi
        
        # 执行完整测试
        uv run python -m src.main test-url "$GITHUB_URL" --timeout 600 --verbose $USE_SMART || {
          echo "❌ 测试失败，但继续生成报告"
          exit_code=$?
        }
        
        # 检查报告生成
        REPORT_DIR="data/test_results/reports"
        if [ -d "$REPORT_DIR" ]; then
          LATEST_JSON=$(ls -t "$REPORT_DIR"/*.json 2>/dev/null | head -1)
          LATEST_HTML=$(ls -t "$REPORT_DIR"/*.html 2>/dev/null | head -1)
          
          if [ -n "$LATEST_JSON" ]; then
            echo "json_report=$LATEST_JSON" >> $GITHUB_OUTPUT
            echo "✅ JSON报告: $LATEST_JSON"
          fi
          
          if [ -n "$LATEST_HTML" ]; then
            echo "html_report=$LATEST_HTML" >> $GITHUB_OUTPUT
            echo "✅ HTML报告: $LATEST_HTML"
          fi
        else
          echo "❌ 未找到报告目录"
        fi
        
        # 输出数据库状态
        echo "database_enabled=$DATABASE_ENABLED" >> $GITHUB_OUTPUT
      
    - name: 📊 Database Storage Verification
      if: always() && steps.test_mcp.outputs.database_enabled == 'true'
      id: verify_database
      run: |
        echo "🔍 验证数据库存储结果..."
        
        # 使用Python脚本验证数据库存储
        cat > verify_db_storage.py << 'EOF'
        #!/usr/bin/env python3
        import sys
        sys.path.append('src')
        
        try:
            from src.core.supabase_connector import SupabaseConnector
            from datetime import datetime, timedelta
            import json
            
            connector = SupabaseConnector()
            
            # 获取最近的测试报告
            recent_cutoff = datetime.now() - timedelta(hours=1)
            
            # 查询各表的记录数
            tables_info = {}
            
            try:
                # 测试报告表
                result = connector.client.table('test_reports').select('id', count='exact').gte('created_at', recent_cutoff.isoformat()).execute()
                tables_info['test_reports'] = {'count': len(result.data), 'recent_records': len(result.data)}
                
                # MCP工具表 
                result = connector.client.table('mcp_tools').select('id', count='exact').execute()
                tables_info['mcp_tools'] = {'count': len(result.data), 'total_tools': len(result.data)}
                
                # 测试执行表
                result = connector.client.table('test_executions').select('id', count='exact').gte('created_at', recent_cutoff.isoformat()).execute()
                tables_info['test_executions'] = {'count': len(result.data), 'recent_records': len(result.data)}
                
                # 质量指标表
                result = connector.client.table('quality_metrics').select('id', count='exact').gte('created_at', recent_cutoff.isoformat()).execute()
                tables_info['quality_metrics'] = {'count': len(result.data), 'recent_records': len(result.data)}
                
                # 性能分析表
                result = connector.client.table('performance_analysis').select('id', count='exact').gte('created_at', recent_cutoff.isoformat()).execute()
                tables_info['performance_analysis'] = {'count': len(result.data), 'recent_records': len(result.data)}
                
                # 部署信息表
                result = connector.client.table('deployment_info').select('id', count='exact').gte('created_at', recent_cutoff.isoformat()).execute()
                tables_info['deployment_info'] = {'count': len(result.data), 'recent_records': len(result.data)}
                
                # 测试元数据表
                result = connector.client.table('test_metadata').select('id', count='exact').gte('created_at', recent_cutoff.isoformat()).execute()
                tables_info['test_metadata'] = {'count': len(result.data), 'recent_records': len(result.data)}
                
                print("✅ 数据库连接成功")
                print("📊 数据库表统计:")
                for table, info in tables_info.items():
                    print(f"  📋 {table}: {info.get('recent_records', info['count'])} 条最新记录")
                
                # 输出JSON格式的统计信息
                with open('db_stats.json', 'w') as f:
                    json.dump(tables_info, f, indent=2)
                
                # 检查是否有数据被保存
                total_recent = sum(info.get('recent_records', 0) for info in tables_info.values())
                if total_recent > 0:
                    print(f"✅ 成功保存 {total_recent} 条记录到数据库")
                    sys.exit(0)
                else:
                    print("⚠️ 未检测到新的数据库记录")
                    sys.exit(1)
                    
            except Exception as e:
                print(f"❌ 查询数据库失败: {e}")
                sys.exit(1)
                
        except Exception as e:
            print(f"❌ 数据库连接失败: {e}")
            sys.exit(1)
        EOF
        
        python verify_db_storage.py || {
          echo "database_verification_failed=true" >> $GITHUB_OUTPUT
          echo "⚠️ 数据库验证失败，但不影响整体测试"
        }
        
        # 保存数据库统计信息为artifact
        if [ -f "db_stats.json" ]; then
          echo "database_stats_available=true" >> $GITHUB_OUTPUT
          echo "✅ 数据库统计信息已生成"
        fi
      
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mcp-test-reports
        path: |
          data/test_results/
          db_stats.json
        retention-days: 30
    
    - name: Check Pages availability
      if: always()
      id: check_pages
      run: |
        # 检查是否可以访问 Pages API
        if curl -s -H "Authorization: token ${{ github.token }}" \
           "https://api.github.com/repos/${{ github.repository }}" | \
           grep -q '"has_pages": true'; then
          echo "pages_available=true" >> $GITHUB_OUTPUT
          echo "✅ Pages 功能可用"
        else
          echo "pages_available=false" >> $GITHUB_OUTPUT
          echo "⚠️ Pages 功能不可用，将跳过 Pages 部署"
        fi

    - name: Setup Pages
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      uses: actions/configure-pages@v4
    
    - name: Prepare site
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      run: |
        mkdir -p _site
        if [ -n "${{ steps.test_mcp.outputs.html_report }}" ] && [ -f "${{ steps.test_mcp.outputs.html_report }}" ]; then
          cp "${{ steps.test_mcp.outputs.html_report }}" _site/index.html
          echo "✅ 使用测试报告作为主页"
        else
          echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>测试结果</title></head><body><h1>MCP工具测试</h1><p>测试未能生成HTML报告，请查看构建产物中的详细日志。</p><p>时间: $(date)</p></body></html>" > _site/index.html
          echo "⚠️ 生成占位页面"
        fi
        
        # 确保目录权限正确
        chmod -R 755 _site

    - name: Upload Pages artifact
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

    - name: Deploy to GitHub Pages
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true
      
    - name: Pages deployment status
      if: always()
      run: |
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "✅ GitHub Pages 部署成功"
          echo "📄 测试报告地址: ${{ steps.deployment.outputs.page_url }}"
        else
          echo "⚠️ GitHub Pages 部署失败，但不影响测试结果"
          echo "📦 请从构建产物下载完整测试报告"
        fi
        
    - name: Create Summary
      if: always()
      run: |
        echo "# 🧪 MCP工具完整测试结果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**测试URL:** \`${{ github.event.inputs.github_url }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**测试模式:** 完整测试（含AI智能分析）" >> $GITHUB_STEP_SUMMARY
        
        # 添加数据库存储状态
        if [ "${{ steps.test_mcp.outputs.database_enabled }}" = "true" ]; then
          echo "**数据库存储:** ✅ 已启用（Supabase）" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.verify_database.outputs.database_stats_available }}" = "true" ] && [ -f "db_stats.json" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📊 数据库存储统计" >> $GITHUB_STEP_SUMMARY
            
            # 简单显示数据库文件内容
            if command -v jq >/dev/null 2>&1; then
              # 如果有jq，使用jq解析
              echo "| 表名 | 最新记录数 |" >> $GITHUB_STEP_SUMMARY
              echo "|------|-----------|" >> $GITHUB_STEP_SUMMARY
              jq -r 'to_entries[] | "| \(.key) | \(.value.recent_records // .value.count) |"' db_stats.json >> $GITHUB_STEP_SUMMARY
            else
              # 否则简单显示原始内容
              echo "```json" >> $GITHUB_STEP_SUMMARY
              cat db_stats.json >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            fi
            
          elif [ "${{ steps.verify_database.outputs.database_verification_failed }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ 数据库验证失败，可能存在连接问题" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "**数据库存储:** ⚠️ 未启用（缺少Supabase配置）" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查 Pages 部署状态
        if [ "${{ steps.check_pages.outputs.pages_available }}" = "true" ]; then
          if [ "${{ steps.deployment.outcome }}" = "success" ] && [ -n "${{ steps.deployment.outputs.page_url }}" ]; then
            echo "## 🌐 在线测试报告" >> $GITHUB_STEP_SUMMARY
            echo "[点击查看完整报告](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 📄 测试报告" >> $GITHUB_STEP_SUMMARY
            echo "📦 GitHub Pages 部署遇到问题，请从下方构建产物中下载完整报告" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## 📄 测试报告" >> $GITHUB_STEP_SUMMARY
          echo "📦 GitHub Pages 功能不可用，请从下方构建产物中下载完整报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ steps.test_mcp.outputs.json_report }}" ]; then
          echo "## 📊 测试结果文件" >> $GITHUB_STEP_SUMMARY
          echo "- JSON报告: \`${{ steps.test_mcp.outputs.json_report }}\`" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.test_mcp.outputs.html_report }}" ]; then
            echo "- HTML报告: \`${{ steps.test_mcp.outputs.html_report }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.verify_database.outputs.database_stats_available }}" = "true" ]; then
            echo "- 数据库统计: \`db_stats.json\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ 测试状态" >> $GITHUB_STEP_SUMMARY
          echo "测试过程中遇到问题，请查看上方日志了解详情。" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "💾 完整测试数据已作为构建产物保存，可在Actions页面下载。" >> $GITHUB_STEP_SUMMARY

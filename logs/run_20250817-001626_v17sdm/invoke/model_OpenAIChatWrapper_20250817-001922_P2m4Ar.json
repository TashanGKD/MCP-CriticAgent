{
    "model_class": "OpenAIChatWrapper",
    "timestamp": "20250817-001922",
    "arguments": {
        "temperature": 0.3,
        "max_tokens": 800,
        "model": "qwen-plus",
        "messages": [
            {
                "role": "system",
                "content": "你是一个专业的MCP(Model Context Protocol)工具测试结果分析专家。\n\n你的任务是分析测试执行结果，判断测试是否通过，并提供详细的分析报告。\n\n## 输入信息格式:\n- 测试用例名称: [name]\n- 测试描述: [description]  \n- 调用工具: [tool_name]\n- 输入参数: [parameters]\n- 期望结果类型: [expected_type]\n- 期望结果内容: [expected_result]\n- 实际执行时间: [execution_time]\n- 实际响应: [actual_response]\n- 错误信息: [error_message]\n\n## 分析原则:\n1. **功能正确性** - 工具是否按预期工作\n2. **响应有效性** - 返回数据是否有意义和完整\n3. **性能表现** - 响应时间是否合理\n4. **错误处理** - 错误信息是否清晰有用\n5. **稳定性** - 结果是否一致可靠\n\n## 输出格式:\n请以JSON格式输出分析结果:\n```json\n{\n  \"status\": \"pass|fail|error\",\n  \"confidence\": 0.0-1.0,\n  \"analysis\": \"详细分析说明\",\n  \"issues\": [\"发现的问题列表\"],\n  \"recommendations\": [\"改进建议\"]\n}\n```\n\n## 判断标准:\n- **PASS**: 工具响应正常，结果符合预期\n- **FAIL**: 工具响应但结果不符合预期\n- **ERROR**: 工具无法响应或出现严重错误\n\n现在请分析给定的测试结果。"
            },
            {
                "role": "user",
                "content": "## Conversation History\nuser: \n请分析以下MCP工具测试结果:\n\n测试用例名称: 基础连通性测试\n测试描述: 验证MCP服务器是否正常启动并能够响应基本请求。\n调用工具: resolve-library-id\n输入参数: {\"libraryName\": \"dummy-library\"}\n期望结果类型: error\n期望结果内容: 明确提示无法找到匹配的库或建议查询优化。\n执行时间: 2.851秒\n\n实际响应:\n{\n  \"success\": true,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: Dumi\\n- Context7-compatible library ID: /umijs/dumi\\n- Description: 📖 Static Site Generator for component library development\\n- Code Snippets: 159\\n- Trust Score: 8.2\\n----------\\n- Title: Testing Library\\n- Context7-compatible library ID: /websites/testing-library_com-docs\\n- Description: Testing Library is a family of packages for user-centric UI component testing. It helps you write maintainable tests by querying and interacting with DOM nodes, avoiding implementation details, and supporting various frameworks like React, Angular, and Vue.\\n- Code Snippets: 579\\n----------\\n- Title: My Dummy Test3\\n- Context7-compatible library ID: /kkkkkom/my_dummy_test3\\n- Description: \\n- Code Snippets: 72\\n----------\\n- Title: SMB Library\\n- Context7-compatible library ID: /talaloni/smblibrary\\n- Description: Free, Open Source, User-Mode SMB 1.0/CIFS, SMB 2.0, SMB 2.1 and SMB 3.0 server and client library\\n- Code Snippets: 16\\n- Trust Score: 8.2\\n----------\\n- Title: Blockly Samples\\n- Context7-compatible library ID: /google/blockly-samples\\n- Description: This repository contains plugins, codelabs, and examples that demonstrate how to use and extend the Blockly library.\\n- Code Snippets: 386\\n- Trust Score: 8.9\\n----------\\n- Title: Testing Library User Event\\n- Context7-compatible library ID: /testing-library/user-event\\n- Description: 🐕 Simulate user events\\n- Code Snippets: 7\\n- Trust Score: 9.3\\n----------\\n- Title: Placeholder API\\n- Context7-compatible library ID: /websites/placeholders_pb4_eu_dev\\n- Description: Placeholder API is a Java library for creating and parsing text placeholders, offering simplified text formatting for developers.\\n- Code Snippets: 30\\n- Trust Score: 7.5\\n----------\\n- Title: Testing Library\\n- Context7-compatible library ID: /testing-library/testing-library-docs\\n- Description: docs site for @testing-library/*\\n- Code Snippets: 499\\n- Trust Score: 9.3\\n----------\\n- Title: React Native Testing Library\\n- Context7-compatible library ID: /callstack/react-native-testing-library\\n- Description: Developer-friendly and complete React Native testing utilities that encourage good testing practices by simulating React Native runtime.\\n- Code Snippets: 344\\n- Trust Score: 10\\n----------\\n- Title: My Dummy Test2\\n- Context7-compatible library ID: /kkkkkom/my_dummy_test2\\n- Description: \\n- Code Snippets: 10\\n----------\\n- Title: Jenkins Library\\n- Context7-compatible library ID: /phgermanov/jenkins-library\\n- Description: Jenkins shared library for Continuous Delivery pipelines.\\n- Code Snippets: 714\\n- Trust Score: 4\\n----------\\n- Title: Prism Library\\n- Context7-compatible library ID: /prismlibrary/prism-documentation\\n- Description: Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Windows 10 UWP, and Xamarin Forms.\\n- Code Snippets: 387\\n- Trust Score: 7.8\\n----------\\n- Title: Svelte Testing Library\\n- Context7-compatible library ID: /testing-library/svelte-testing-library\\n- Description: :chipmunk: Simple and complete Svelte DOM testing utilities that encourage good testing practices\\n- Code Snippets: 22\\n- Trust Score: 9.3\\n----------\\n- Title: My Dummy Test 50\\n- Context7-compatible library ID: /kkkkkom/my_dummy_test_50\\n- Description: \\n- Code Snippets: 43\\n----------\\n- Title: React Testing Library\\n- Context7-compatible library ID: /testing-library/react-testing-library\\n- Description: 🐐 Simple and complete React DOM testing utilities that encourage good testing practices.\\n- Code Snippets: 16\\n- Trust Score: 9.3\\n----------\\n- Title: Testing Library Jasmine DOM\\n- Context7-compatible library ID: /testing-library/jasmine-dom\\n- Description: 🦥 Custom Jasmine matchers to test the state of the DOM\\n- Code Snippets: 38\\n- Trust Score: 9.3\\n----------\\n- Title: DOM Testing Library\\n- Context7-compatible library ID: /vuetifyjs/dom-testing-library\\n- Description: Simple and complete DOM testing utilities that encourage good testing practices by querying the DOM in a way similar to how users find elements.\\n- Code Snippets: 32\\n- Trust Score: 8.9\\n----------\\n- Title: Mockafka-py\\n- Context7-compatible library ID: /alm0ra/mockafka-py\\n- Description: Mockafka is a Python library providing a fake, in-memory implementation of Kafka clients for testing, compatible with confluent-kafka-python and aiokafka.\\n- Code Snippets: 49\\n- Trust Score: 8.3\\n----------\\n- Title: Zen\\n- Context7-compatible library ID: /zen-lang/zen\\n- Description: Library for model driven systems\\n- Code Snippets: 7\\n- Trust Score: 5\\n----------\\n- Title: Aily Blockly Libraries\\n- Context7-compatible library ID: /ailyproject/aily-blockly-libraries\\n- Description: This repository collects and stores Aily Blockly libraries, providing guidelines for library development, private deployment, multilingual support, and testing.\\n- Code Snippets: 12\\n- Trust Score: 4.5\\n----------\\n- Title: DSPy Examples\\n- Context7-compatible library ID: /mbakgun/dspy-examples\\n- Description: This repository provides various examples demonstrating the usage of DSPy, a framework for programming language models with Python, enabling the creation of reliable, composable, and optimizable AI applications.\\n- Code Snippets: 7\\n- Trust Score: 8.4\\n----------\\n- Title: My Dummy Md\\n- Context7-compatible library ID: /kkkkkom/my_dummy_md\\n- Description: \\n- Code Snippets: 109\\n----------\\n- Title: Testing Library Jest DOM\\n- Context7-compatible library ID: /testing-library/jest-dom\\n- Description: :owl: Custom jest matchers to test the state of the DOM\\n- Code Snippets: 47\\n- Trust Score: 9.3\\n----------\\n- Title: Janitor\\n- Context7-compatible library ID: /howmanysmall/janitor\\n- Description: Janitor library.\\n- Code Snippets: 7\\n- Trust Score: 8.6\\n----------\\n- Title: Testcontainers Java\\n- Context7-compatible library ID: /testcontainers/testcontainers-java\\n- Description: Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.\\n- Code Snippets: 388\\n- Trust Score: 8.7\\n- Versions: 1.21.2\\n----------\\n- Title: MockK (llmstxt)\\n- Context7-compatible library ID: /context7.com/llmstxt\\n- Description: MockK is a library for mocking in Kotlin, enabling powerful and flexible unit testing by simulating objects and behaviors.\\n- Code Snippets: 63\\n----------\\n- Title: Robot Framework SeleniumLibrary\\n- Context7-compatible library ID: /robotframework/seleniumlibrary\\n- Description: Web testing library for Robot Framework\\n- Code Snippets: 249\\n- Trust Score: 8.8\\n----------\\n- Title: PLAMS\\n- Context7-compatible library ID: /scm-nv/plams\\n- Description: Python Library for Automating Molecular Simulations\\n- Code Snippets: 1067\\n- Trust Score: 6.4\\n----------\\n- Title: Material Design Library\\n- Context7-compatible library ID: /navasmdc/materialdesignlibrary\\n- Description: A library for Android that provides Material Design components and widgets, including buttons, switches, progress indicators, and dialogs, with easy integration via Gradle.\\n- Code Snippets: 37\\n- Trust Score: 8.6\\n----------\\n- Title: Testcontainers Node\\n- Context7-compatible library ID: /testcontainers/testcontainers-node\\n- Description: Testcontainers is a NodeJS library that supports tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.\\n- Code Snippets: 145\\n- Trust Score: 8.7\\n----------\\n- Title: Testcontainers for .NET\\n- Context7-compatible library ID: /testcontainers/testcontainers-dotnet\\n- Description: A library to support tests with throwaway instances of Docker containers for all compatible .NET Standard versions.\\n- Code Snippets: 188\\n- Trust Score: 8.7\\n----------\\n- Title: llm\\n- Context7-compatible library ID: /simonw/llm\\n- Description: A CLI tool and Python library for interacting with various Large Language Models, supporting remote APIs and local installations, with features for prompts, logging, embeddings, and tool execution.\\n- Code Snippets: 672\\n----------\\n- Title: ng-mocks\\n- Context7-compatible library ID: /help-me-mom/ng-mocks\\n- Description: Angular testing library for mocking components, directives, pipes, services and facilitating TestBed setup\\n- Code Snippets: 487\\n- Trust Score: 8.2\\n----------\\n- Title: Amazon SageMaker Examples\\n- Context7-compatible library ID: /aws/amazon-sagemaker-examples\\n- Description: Example Jupyter notebooks demonstrating how to build, train, and deploy machine learning models using Amazon SageMaker, covering a wide range of ML tasks and use cases.\\n- Code Snippets: 4961\\n- Trust Score: 9.6\\n----------\\n- Title: Minari\\n- Context7-compatible library ID: /websites/minari_farama\\n- Description: Minari is a dataset management library for reinforcement learning, providing tools for creating, storing, and using diverse datasets like D4RL and BabyAI.\\n- Code Snippets: 1457\\n- Trust Score: 7.5\\n----------\\n- Title: Chameleon Controls Library\\n- Context7-compatible library ID: /genexuslabs/chameleon-controls-library\\n- Description: A library of white-label, highly-customizable, and reusable web components built with Stencil.\\n- Code Snippets: 181\\n- Trust Score: 8.6\\n----------\\n- Title: Swarm\\n- Context7-compatible library ID: /openai/swarm\\n- Description: Swarm is an experimental and educational Python library for lightweight, controllable, and testable agent coordination and execution, featuring Agent abstractions and handoffs.\\n- Code Snippets: 29\\n- Trust Score: 9.1\\n----------\\n- Title: STUMPY\\n- Context7-compatible library ID: /stumpy-dev/stumpy\\n- Description: STUMPY is a powerful and scalable Python library for modern time series analysis\\n- Code Snippets: 112\\n- Trust Score: 5\"\n      }\n    ]\n  },\n  \"raw\": {\n    \"result\": {\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: Dumi\\n- Context7-compatible library ID: /umijs/dumi\\n- Description: 📖 Static Site Generator for component library development\\n- Code Snippets: 159\\n- Trust Score: 8.2\\n----------\\n- Title: Testing Library\\n- Context7-compatible library ID: /websites/testing-library_com-docs\\n- Description: Testing Library is a family of packages for user-centric UI component testing. It helps you write maintainable tests by querying and interacting with DOM nodes, avoiding implementation details, and supporting various frameworks like React, Angular, and Vue.\\n- Code Snippets: 579\\n----------\\n- Title: My Dummy Test3\\n- Context7-compatible library ID: /kkkkkom/my_dummy_test3\\n- Description: \\n- Code Snippets: 72\\n----------\\n- Title: SMB Library\\n- Context7-compatible library ID: /talaloni/smblibrary\\n- Description: Free, Open Source, User-Mode SMB 1.0/CIFS, SMB 2.0, SMB 2.1 and SMB 3.0 server and client library\\n- Code Snippets: 16\\n- Trust Score: 8.2\\n----------\\n- Title: Blockly Samples\\n- Context7-compatible library ID: /google/blockly-samples\\n- Description: This repository contains plugins, codelabs, and examples that demonstrate how to use and extend the Blockly library.\\n- Code Snippets: 386\\n- Trust Score: 8.9\\n----------\\n- Title: Testing Library User Event\\n- Context7-compatible library ID: /testing-library/user-event\\n- Description: 🐕 Simulate user events\\n- Code Snippets: 7\\n- Trust Score: 9.3\\n----------\\n- Title: Placeholder API\\n- Context7-compatible library ID: /websites/placeholders_pb4_eu_dev\\n- Description: Placeholder API is a Java library for creating and parsing text placeholders, offering simplified text formatting for developers.\\n- Code Snippets: 30\\n- Trust Score: 7.5\\n----------\\n- Title: Testing Library\\n- Context7-compatible library ID: /testing-library/testing-library-docs\\n- Description: docs site for @testing-library/*\\n- Code Snippets: 499\\n- Trust Score: 9.3\\n----------\\n- Title: React Native Testing Library\\n- Context7-compatible library ID: /callstack/react-native-testing-library\\n- Description: Developer-friendly and complete React Native testing utilities that encourage good testing practices by simulating React Native runtime.\\n- Code Snippets: 344\\n- Trust Score: 10\\n----------\\n- Title: My Dummy Test2\\n- Context7-compatible library ID: /kkkkkom/my_dummy_test2\\n- Description: \\n- Code Snippets: 10\\n----------\\n- Title: Jenkins Library\\n- Context7-compatible library ID: /phgermanov/jenkins-library\\n- Description: Jenkins shared library for Continuous Delivery pipelines.\\n- Code Snippets: 714\\n- Trust Score: 4\\n----------\\n- Title: Prism Library\\n- Context7-compatible library ID: /prismlibrary/prism-documentation\\n- Description: Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Windows 10 UWP, and Xamarin Forms.\\n- Code Snippets: 387\\n- Trust Score: 7.8\\n----------\\n- Title: Svelte Testing Library\\n- Context7-compatible library ID: /testing-library/svelte-testing-library\\n- Description: :chipmunk: Simple and complete Svelte DOM testing utilities that encourage good testing practices\\n- Code Snippets: 22\\n- Trust Score: 9.3\\n----------\\n- Title: My Dummy Test 50\\n- Context7-compatible library ID: /kkkkkom/my_dummy_test_50\\n- Description: \\n- Code Snippets: 43\\n----------\\n- Title: React Testing Library\\n- Context7-compatible library ID: /testing-library/react-testing-library\\n- Description: 🐐 Simple and complete React DOM testing utilities that encourage good testing practices.\\n- Code Snippets: 16\\n- Trust Score: 9.3\\n----------\\n- Title: Testing Library Jasmine DOM\\n- Context7-compatible library ID: /testing-library/jasmine-dom\\n- Description: 🦥 Custom Jasmine matchers to test the state of the DOM\\n- Code Snippets: 38\\n- Trust Score: 9.3\\n----------\\n- Title: DOM Testing Library\\n- Context7-compatible library ID: /vuetifyjs/dom-testing-library\\n- Description: Simple and complete DOM testing utilities that encourage good testing practices by querying the DOM in a way similar to how users find elements.\\n- Code Snippets: 32\\n- Trust Score: 8.9\\n----------\\n- Title: Mockafka-py\\n- Context7-compatible library ID: /alm0ra/mockafka-py\\n- Description: Mockafka is a Python library providing a fake, in-memory implementation of Kafka clients for testing, compatible with confluent-kafka-python and aiokafka.\\n- Code Snippets: 49\\n- Trust Score: 8.3\\n----------\\n- Title: Zen\\n- Context7-compatible library ID: /zen-lang/zen\\n- Description: Library for model driven systems\\n- Code Snippets: 7\\n- Trust Score: 5\\n----------\\n- Title: Aily Blockly Libraries\\n- Context7-compatible library ID: /ailyproject/aily-blockly-libraries\\n- Description: This repository collects and stores Aily Blockly libraries, providing guidelines for library development, private deployment, multilingual support, and testing.\\n- Code Snippets: 12\\n- Trust Score: 4.5\\n----------\\n- Title: DSPy Examples\\n- Context7-compatible library ID: /mbakgun/dspy-examples\\n- Description: This repository provides various examples demonstrating the usage of DSPy, a framework for programming language models with Python, enabling the creation of reliable, composable, and optimizable AI applications.\\n- Code Snippets: 7\\n- Trust Score: 8.4\\n----------\\n- Title: My Dummy Md\\n- Context7-compatible library ID: /kkkkkom/my_dummy_md\\n- Description: \\n- Code Snippets: 109\\n----------\\n- Title: Testing Library Jest DOM\\n- Context7-compatible library ID: /testing-library/jest-dom\\n- Description: :owl: Custom jest matchers to test the state of the DOM\\n- Code Snippets: 47\\n- Trust Score: 9.3\\n----------\\n- Title: Janitor\\n- Context7-compatible library ID: /howmanysmall/janitor\\n- Description: Janitor library.\\n- Code Snippets: 7\\n- Trust Score: 8.6\\n----------\\n- Title: Testcontainers Java\\n- Context7-compatible library ID: /testcontainers/testcontainers-java\\n- Description: Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.\\n- Code Snippets: 388\\n- Trust Score: 8.7\\n- Versions: 1.21.2\\n----------\\n- Title: MockK (llmstxt)\\n- Context7-compatible library ID: /context7.com/llmstxt\\n- Description: MockK is a library for mocking in Kotlin, enabling powerful and flexible unit testing by simulating objects and behaviors.\\n- Code Snippets: 63\\n----------\\n- Title: Robot Framework SeleniumLibrary\\n- Context7-compatible library ID: /robotframework/seleniumlibrary\\n- Description: Web testing library for Robot Framework\\n- Code Snippets: 249\\n- Trust Score: 8.8\\n----------\\n- Title: PLAMS\\n- Context7-compatible library ID: /scm-nv/plams\\n- Description: Python Library for Automating Molecular Simulations\\n- Code Snippets: 1067\\n- Trust Score: 6.4\\n----------\\n- Title: Material Design Library\\n- Context7-compatible library ID: /navasmdc/materialdesignlibrary\\n- Description: A library for Android that provides Material Design components and widgets, including buttons, switches, progress indicators, and dialogs, with easy integration via Gradle.\\n- Code Snippets: 37\\n- Trust Score: 8.6\\n----------\\n- Title: Testcontainers Node\\n- Context7-compatible library ID: /testcontainers/testcontainers-node\\n- Description: Testcontainers is a NodeJS library that supports tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.\\n- Code Snippets: 145\\n- Trust Score: 8.7\\n----------\\n- Title: Testcontainers for .NET\\n- Context7-compatible library ID: /testcontainers/testcontainers-dotnet\\n- Description: A library to support tests with throwaway instances of Docker containers for all compatible .NET Standard versions.\\n- Code Snippets: 188\\n- Trust Score: 8.7\\n----------\\n- Title: llm\\n- Context7-compatible library ID: /simonw/llm\\n- Description: A CLI tool and Python library for interacting with various Large Language Models, supporting remote APIs and local installations, with features for prompts, logging, embeddings, and tool execution.\\n- Code Snippets: 672\\n----------\\n- Title: ng-mocks\\n- Context7-compatible library ID: /help-me-mom/ng-mocks\\n- Description: Angular testing library for mocking components, directives, pipes, services and facilitating TestBed setup\\n- Code Snippets: 487\\n- Trust Score: 8.2\\n----------\\n- Title: Amazon SageMaker Examples\\n- Context7-compatible library ID: /aws/amazon-sagemaker-examples\\n- Description: Example Jupyter notebooks demonstrating how to build, train, and deploy machine learning models using Amazon SageMaker, covering a wide range of ML tasks and use cases.\\n- Code Snippets: 4961\\n- Trust Score: 9.6\\n----------\\n- Title: Minari\\n- Context7-compatible library ID: /websites/minari_farama\\n- Description: Minari is a dataset management library for reinforcement learning, providing tools for creating, storing, and using diverse datasets like D4RL and BabyAI.\\n- Code Snippets: 1457\\n- Trust Score: 7.5\\n----------\\n- Title: Chameleon Controls Library\\n- Context7-compatible library ID: /genexuslabs/chameleon-controls-library\\n- Description: A library of white-label, highly-customizable, and reusable web components built with Stencil.\\n- Code Snippets: 181\\n- Trust Score: 8.6\\n----------\\n- Title: Swarm\\n- Context7-compatible library ID: /openai/swarm\\n- Description: Swarm is an experimental and educational Python library for lightweight, controllable, and testable agent coordination and execution, featuring Agent abstractions and handoffs.\\n- Code Snippets: 29\\n- Trust Score: 9.1\\n----------\\n- Title: STUMPY\\n- Context7-compatible library ID: /stumpy-dev/stumpy\\n- Description: STUMPY is a powerful and scalable Python library for modern time series analysis\\n- Code Snippets: 112\\n- Trust Score: 5\"\n        }\n      ]\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1007070\n  }\n}\n\n请分析这个测试是否通过，并提供详细分析。\n\nmcp_test_validator: ```json\n{\n  \"status\": \"fail\",\n  \"confidence\": 0.95,\n  \"analysis\": \"测试未通过，因为测试用例的期望结果类型是 'error'，并且期望内容是明确提示无法找到匹配的库或建议查询优化。然而，实际响应显示 'success': true，并返回了大量库的列表，这表明工具没有按照预期返回错误信息。虽然工具成功响应且返回了结构化数据，但结果不符合预期的错误类型，因此测试失败。\",\n  \"issues\": [\n    \"实际响应与期望结果不符：期望返回错误信息，但实际返回了成功状态并列出多个库。\",\n    \"工具未对输入参数 'dummy-library' 进行有效验证或提示优化建议。\",\n    \"响应虽然结构完整，但未能正确处理未找到匹配库的情况。\"\n  ],\n  \"recommendations\": [\n    \"检查 resolve-library-id 工具的逻辑，确保在没有明确匹配时返回预期的错误信息。\",\n    \"优化查询逻辑，当输入的库名不明确或无法匹配时，提供清晰的提示信息，如建议优化查询关键词。\",\n    \"确保工具在不同输入情况下返回的结果类型与测试期望一致，提升错误处理能力。\"\n  ]\n}\n```\nuser: \n请分析以下MCP工具测试结果:\n\n测试用例名称: 解析有效库ID测试\n测试描述: 测试resolve-library-id工具是否能正确解析一个常见库（如react）的Context7兼容库ID。\n调用工具: resolve-library-id\n输入参数: {\"libraryName\": \"react\"}\n期望结果类型: success\n期望结果内容: 返回类似 '/facebook/react' 的库ID以及选择原因的描述。\n执行时间: 2.722秒\n\n实际响应:\n{\n  \"success\": true,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: React\\n- Context7-compatible library ID: /websites/16_reactjs\\n- Description: React is a JavaScript library for building user interfaces, designed for gradual adoption and creating interactive web applications.\\n- Code Snippets: 650\\n- Trust Score: 7.5\\n----------\\n- Title: React\\n- Context7-compatible library ID: /websites/fr_legacy_reactjs\\n- Description: React is a JavaScript library for building user interfaces (UI).\\n- Code Snippets: 256\\n- Trust Score: 7.5\\n----------\\n- Title: React\\n- Context7-compatible library ID: /websites/react_dev\\n- Description: React is a JavaScript library for building user interfaces. It allows developers to create interactive web and native applications using reusable components, enabling efficient and scalable UI development.\\n- Code Snippets: 4077\\n- Trust Score: 8\\n----------\\n- Title: Keep React\\n- Context7-compatible library ID: /staticmania/keep-react\\n- Description: Keep React is an open-source component library built on Tailwind CSS and React.js, offering pre-designed UI components to streamline the creation of modern, responsive web applications.\\n- Code Snippets: 216\\n----------\\n- Title: React Chartjs 2\\n- Context7-compatible library ID: /reactchartjs/react-chartjs-2\\n- Description: React components for Chart.js, the most popular charting library, supporting Chart.js v4 and v3.\\n- Code Snippets: 70\\n- Trust Score: 7.5\\n----------\\n- Title: Syncfusion React UI Components\\n- Context7-compatible library ID: /syncfusion/ej2-react-ui-components\\n- Description: Syncfusion's React UI Components library offers over 70 lightweight, responsive, modular, and touch-friendly components for building modern applications.\\n- Code Snippets: 520\\n- Trust Score: 8.7\\n----------\\n- Title: React Leaflet\\n- Context7-compatible library ID: /websites/react-leaflet_js\\n- Description: Provides React components for building interactive maps using the Leaflet JavaScript library.\\n- Code Snippets: 428\\n- Trust Score: 7.5\\n----------\\n- Title: Xiping React Components\\n- Context7-compatible library ID: /llmstxt/xiping-react-components_vercel_app-llms.txt\\n- Description: A feature-rich React component library offering over 20 modern UI components for animations, data visualization, text manipulation, and more, built with React 19+, TypeScript, and Storybook documentation.\\n- Code Snippets: 3\\n- Trust Score: 8\\n----------\\n- Title: React Connect.js\\n- Context7-compatible library ID: /stripe/react-connect-js\\n- Description: React Connect.js provides React components that act as a thin wrapper around Connect.js embedded components, simplifying their integration into React applications by managing state and lifecycle.\\n- Code Snippets: 2\\n- Trust Score: 8.9\\n----------\\n- Title: React Stripe.js\\n- Context7-compatible library ID: /stripe/react-stripe-js\\n- Description: React Stripe.js provides React components for Stripe.js and Elements, enabling developers to easily integrate Stripe's payment processing capabilities into their React applications.\\n- Code Snippets: 11\\n- Trust Score: 8.9\\n----------\\n- Title: React Docgen\\n- Context7-compatible library ID: /reactjs/react-docgen\\n- Description: React-docgen is a customizable library that extracts information from React components and provides it in a structured, machine-readable format for documentation generation.\\n- Code Snippets: 101\\n- Trust Score: 9\\n----------\\n- Title: React Canvas Confetti\\n- Context7-compatible library ID: /ulitcos/react-canvas-confetti\\n- Description: React component for canvas-confetti library\\n- Code Snippets: 5\\n- Trust Score: 5.8\\n----------\\n- Title: React\\n- Context7-compatible library ID: /reactjs/react.dev\\n- Description: React.dev is the official documentation website for React, a JavaScript library for building user interfaces, providing guides, API references, and tutorials.\\n- Code Snippets: 2777\\n- Trust Score: 10\\n----------\\n- Title: React Codemirror\\n- Context7-compatible library ID: /uiwjs/react-codemirror\\n- Description: CodeMirror 6 component for React. @codemirror https://uiwjs.github.io/react-codemirror/\\n- Code Snippets: 309\\n- Trust Score: 9.9\\n----------\\n- Title: TalkJS React\\n- Context7-compatible library ID: /talkjs/talkjs-react\\n- Description: React components for TalkJS\\n- Code Snippets: 3\\n- Trust Score: 7.9\\n----------\\n- Title: React Vant\\n- Context7-compatible library ID: /3lang3/react-vant\\n- Description: React Vant is a mobile component library based on the React framework, inspired by Vant, offering over 70 high-quality components with features like small size, TypeScript support, theme customization, and SSR compatibility.\\n- Code Snippets: 465\\n- Trust Score: 8.9\\n----------\\n- Title: React Flow\\n- Context7-compatible library ID: /websites/reactflow_dev\\n- Description: A customizable React component library for building interactive node-based editors and diagrams, offering features like dragging, zooming, and panning.\\n- Code Snippets: 2305\\n- Trust Score: 7.5\\n----------\\n- Title: React Activation\\n- Context7-compatible library ID: /cjy0208/react-activation\\n- Description: React Activation is a library that implements Vue's <keep-alive /> functionality for React, enabling component state persistence and caching.\\n- Code Snippets: 26\\n- Trust Score: 9.1\\n----------\\n- Title: Cloud React\\n- Context7-compatible library ID: /shuyunff2e/cloud-react\\n- Description: Cloud React is a React component library offering a rich set of enterprise-grade UI components and solutions, built with a focus on design, performance, and customization.\\n- Code Snippets: 247\\n- Trust Score: 5.7\\n- Versions: v2.0.2\\n----------\\n- Title: React\\n- Context7-compatible library ID: /facebook/react\\n- Description: The library for web and native user interfaces.\\n- Code Snippets: 2864\\n- Trust Score: 9.2\\n- Versions: v18_3_1\\n----------\\n- Title: KPC\\n- Context7-compatible library ID: /ksc-fe/kpc\\n- Description: A UI Components Library for Intact, Vue, React and Angular.\\n- Code Snippets: 983\\n- Trust Score: 5.9\\n----------\\n- Title: Rive React\\n- Context7-compatible library ID: /rive-app/rive-react\\n- Description: A React runtime library for Rive, providing components and hooks for integrating Rive animations into React applications.\\n- Code Snippets: 8\\n- Trust Score: 9.3\\n----------\\n- Title: React ABC\\n- Context7-compatible library ID: /fuhton/react-abc\\n- Description: A React component for displaying ABC notation, wrapping the Abc.js library for use in React applications.\\n- Code Snippets: 13\\n- Trust Score: 5.8\\n----------\\n- Title: Kubit React Components\\n- Context7-compatible library ID: /kubit-ui/kubit-react-components\\n- Description: Kubit React Components is a customizable, accessible library of React web components, designed to enhance your application's user experience.\\n- Code Snippets: 9\\n- Trust Score: 5.9\\n----------\\n- Title: React Plotly.js\\n- Context7-compatible library ID: /plotly/react-plotly.js\\n- Description: A React component for Plotly.js, enabling the creation of interactive charts and visualizations within React applications.\\n- Code Snippets: 9\\n- Trust Score: 8\\n----------\\n- Title: wavesurfer.js React\\n- Context7-compatible library ID: /katspaugh/wavesurfer-react\\n- Description: A React component and hook for wavesurfer.js, simplifying the integration of audio waveform visualization and playback into React applications with familiar options and event handling.\\n- Code Snippets: 4\\n- Trust Score: 8.2\\n----------\\n- Title: React CSV\\n- Context7-compatible library ID: /react-csv/react-csv\\n- Description: React CSV is a library that provides components for generating and downloading CSV files from React applications, supporting various data formats and custom headers.\\n- Code Snippets: 31\\n- Trust Score: 4.6\\n----------\\n- Title: Core DS Core Components\\n- Context7-compatible library ID: /core-ds/core-components\\n- Description: A React component library for building web interfaces, offering a collection of reusable UI elements with comprehensive documentation and a sandbox environment.\\n- Code Snippets: 243\\n- Trust Score: 6.6\\n----------\\n- Title: React\\n- Context7-compatible library ID: /jeanduplessis/react.dev\\n- Description: This repository contains the source code and documentation for the official React website, react.dev, which is built using Next.js.\\n- Code Snippets: 2562\\n- Trust Score: 5.4\\n----------\\n- Title: LiveKit Components JS\\n- Context7-compatible library ID: /livekit/components-js\\n- Description: Official open source React components and examples for building with LiveKit.\\n- Code Snippets: 142\\n- Trust Score: 9.3\\n----------\\n- Title: React Google Maps\\n- Context7-compatible library ID: /visgl/react-google-maps\\n- Description: A TypeScript/JavaScript library providing React components and hooks to integrate the Google Maps JavaScript API into React applications, enabling map creation, marker placement, and use of various Maps API services and libraries.\\n- Code Snippets: 218\\n- Trust Score: 7.7\\n----------\\n- Title: React Rainbow Components\\n- Context7-compatible library ID: /nexxtway/react-rainbow\\n- Description: React Rainbow is a collection of components designed to help developers build applications quickly, offering over 90 components with features like i18n support, accessibility, and TypeScript typing.\\n- Code Snippets: 578\\n- Trust Score: 7.3\\n----------\\n- Title: React Markdown\\n- Context7-compatible library ID: /remarkjs/react-markdown\\n- Description: A React component that safely renders markdown strings into React elements, supporting custom components and plugins for extended functionality.\\n- Code Snippets: 16\\n- Trust Score: 8.9\\n----------\\n- Title: hCaptcha React\\n- Context7-compatible library ID: /hcaptcha/react-hcaptcha\\n- Description: A React component library for integrating hCaptcha, a privacy-focused alternative to reCAPTCHA, into web applications.\\n- Code Snippets: 9\\n- Trust Score: 8.7\\n----------\\n- Title: React95\\n- Context7-compatible library ID: /react95/react95\\n- Description: React95 is a component library that recreates the iconic user interface design of Windows 95 for React applications.\\n- Code Snippets: 18\\n- Trust Score: 7.8\\n----------\\n- Title: Zent\\n- Context7-compatible library ID: /youzan/zent\\n- Description: Zent is a React component library developed at Youzan, offering a collection of essential UI components and domain-specific components to make React development faster and simpler.\\n- Code Snippets: 829\\n- Trust Score: 9.5\\n----------\\n- Title: React Paystack\\n- Context7-compatible library ID: /iamraphson/react-paystack\\n- Description: ReactJS library for implementing paystack payment gateway\\n- Code Snippets: 7\\n- Trust Score: 9.1\\n----------\\n- Title: React Remark\\n- Context7-compatible library ID: /remarkjs/react-remark\\n- Description: React Remark provides React hooks and components for rendering Markdown into React elements using the remark ecosystem.\\n- Code Snippets: 9\\n- Trust Score: 8.9\\n----------\\n- Title: React Select\\n- Context7-compatible library ID: /jedwatson/react-select\\n- Description: React Select is a flexible and extensible select control for React applications, offering customizable styling, component injection, and support for advanced features like option groups and portal support.\\n- Code Snippets: 16\\n- Trust Score: 8.1\\n----------\\n- Title: Akool React SDK\\n- Context7-compatible library ID: /akool-rinku/akool-react-sdk\\n- Description: A React component library for integrating AI-powered video chat avatars into web applications, featuring real-time streaming, customizable personalities, and WebSocket communication.\\n- Code Snippets: 10\\n- Trust Score: 2.2\"\n      }\n    ]\n  },\n  \"raw\": {\n    \"result\": {\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: React\\n- Context7-compatible library ID: /websites/16_reactjs\\n- Description: React is a JavaScript library for building user interfaces, designed for gradual adoption and creating interactive web applications.\\n- Code Snippets: 650\\n- Trust Score: 7.5\\n----------\\n- Title: React\\n- Context7-compatible library ID: /websites/fr_legacy_reactjs\\n- Description: React is a JavaScript library for building user interfaces (UI).\\n- Code Snippets: 256\\n- Trust Score: 7.5\\n----------\\n- Title: React\\n- Context7-compatible library ID: /websites/react_dev\\n- Description: React is a JavaScript library for building user interfaces. It allows developers to create interactive web and native applications using reusable components, enabling efficient and scalable UI development.\\n- Code Snippets: 4077\\n- Trust Score: 8\\n----------\\n- Title: Keep React\\n- Context7-compatible library ID: /staticmania/keep-react\\n- Description: Keep React is an open-source component library built on Tailwind CSS and React.js, offering pre-designed UI components to streamline the creation of modern, responsive web applications.\\n- Code Snippets: 216\\n----------\\n- Title: React Chartjs 2\\n- Context7-compatible library ID: /reactchartjs/react-chartjs-2\\n- Description: React components for Chart.js, the most popular charting library, supporting Chart.js v4 and v3.\\n- Code Snippets: 70\\n- Trust Score: 7.5\\n----------\\n- Title: Syncfusion React UI Components\\n- Context7-compatible library ID: /syncfusion/ej2-react-ui-components\\n- Description: Syncfusion's React UI Components library offers over 70 lightweight, responsive, modular, and touch-friendly components for building modern applications.\\n- Code Snippets: 520\\n- Trust Score: 8.7\\n----------\\n- Title: React Leaflet\\n- Context7-compatible library ID: /websites/react-leaflet_js\\n- Description: Provides React components for building interactive maps using the Leaflet JavaScript library.\\n- Code Snippets: 428\\n- Trust Score: 7.5\\n----------\\n- Title: Xiping React Components\\n- Context7-compatible library ID: /llmstxt/xiping-react-components_vercel_app-llms.txt\\n- Description: A feature-rich React component library offering over 20 modern UI components for animations, data visualization, text manipulation, and more, built with React 19+, TypeScript, and Storybook documentation.\\n- Code Snippets: 3\\n- Trust Score: 8\\n----------\\n- Title: React Connect.js\\n- Context7-compatible library ID: /stripe/react-connect-js\\n- Description: React Connect.js provides React components that act as a thin wrapper around Connect.js embedded components, simplifying their integration into React applications by managing state and lifecycle.\\n- Code Snippets: 2\\n- Trust Score: 8.9\\n----------\\n- Title: React Stripe.js\\n- Context7-compatible library ID: /stripe/react-stripe-js\\n- Description: React Stripe.js provides React components for Stripe.js and Elements, enabling developers to easily integrate Stripe's payment processing capabilities into their React applications.\\n- Code Snippets: 11\\n- Trust Score: 8.9\\n----------\\n- Title: React Docgen\\n- Context7-compatible library ID: /reactjs/react-docgen\\n- Description: React-docgen is a customizable library that extracts information from React components and provides it in a structured, machine-readable format for documentation generation.\\n- Code Snippets: 101\\n- Trust Score: 9\\n----------\\n- Title: React Canvas Confetti\\n- Context7-compatible library ID: /ulitcos/react-canvas-confetti\\n- Description: React component for canvas-confetti library\\n- Code Snippets: 5\\n- Trust Score: 5.8\\n----------\\n- Title: React\\n- Context7-compatible library ID: /reactjs/react.dev\\n- Description: React.dev is the official documentation website for React, a JavaScript library for building user interfaces, providing guides, API references, and tutorials.\\n- Code Snippets: 2777\\n- Trust Score: 10\\n----------\\n- Title: React Codemirror\\n- Context7-compatible library ID: /uiwjs/react-codemirror\\n- Description: CodeMirror 6 component for React. @codemirror https://uiwjs.github.io/react-codemirror/\\n- Code Snippets: 309\\n- Trust Score: 9.9\\n----------\\n- Title: TalkJS React\\n- Context7-compatible library ID: /talkjs/talkjs-react\\n- Description: React components for TalkJS\\n- Code Snippets: 3\\n- Trust Score: 7.9\\n----------\\n- Title: React Vant\\n- Context7-compatible library ID: /3lang3/react-vant\\n- Description: React Vant is a mobile component library based on the React framework, inspired by Vant, offering over 70 high-quality components with features like small size, TypeScript support, theme customization, and SSR compatibility.\\n- Code Snippets: 465\\n- Trust Score: 8.9\\n----------\\n- Title: React Flow\\n- Context7-compatible library ID: /websites/reactflow_dev\\n- Description: A customizable React component library for building interactive node-based editors and diagrams, offering features like dragging, zooming, and panning.\\n- Code Snippets: 2305\\n- Trust Score: 7.5\\n----------\\n- Title: React Activation\\n- Context7-compatible library ID: /cjy0208/react-activation\\n- Description: React Activation is a library that implements Vue's <keep-alive /> functionality for React, enabling component state persistence and caching.\\n- Code Snippets: 26\\n- Trust Score: 9.1\\n----------\\n- Title: Cloud React\\n- Context7-compatible library ID: /shuyunff2e/cloud-react\\n- Description: Cloud React is a React component library offering a rich set of enterprise-grade UI components and solutions, built with a focus on design, performance, and customization.\\n- Code Snippets: 247\\n- Trust Score: 5.7\\n- Versions: v2.0.2\\n----------\\n- Title: React\\n- Context7-compatible library ID: /facebook/react\\n- Description: The library for web and native user interfaces.\\n- Code Snippets: 2864\\n- Trust Score: 9.2\\n- Versions: v18_3_1\\n----------\\n- Title: KPC\\n- Context7-compatible library ID: /ksc-fe/kpc\\n- Description: A UI Components Library for Intact, Vue, React and Angular.\\n- Code Snippets: 983\\n- Trust Score: 5.9\\n----------\\n- Title: Rive React\\n- Context7-compatible library ID: /rive-app/rive-react\\n- Description: A React runtime library for Rive, providing components and hooks for integrating Rive animations into React applications.\\n- Code Snippets: 8\\n- Trust Score: 9.3\\n----------\\n- Title: React ABC\\n- Context7-compatible library ID: /fuhton/react-abc\\n- Description: A React component for displaying ABC notation, wrapping the Abc.js library for use in React applications.\\n- Code Snippets: 13\\n- Trust Score: 5.8\\n----------\\n- Title: Kubit React Components\\n- Context7-compatible library ID: /kubit-ui/kubit-react-components\\n- Description: Kubit React Components is a customizable, accessible library of React web components, designed to enhance your application's user experience.\\n- Code Snippets: 9\\n- Trust Score: 5.9\\n----------\\n- Title: React Plotly.js\\n- Context7-compatible library ID: /plotly/react-plotly.js\\n- Description: A React component for Plotly.js, enabling the creation of interactive charts and visualizations within React applications.\\n- Code Snippets: 9\\n- Trust Score: 8\\n----------\\n- Title: wavesurfer.js React\\n- Context7-compatible library ID: /katspaugh/wavesurfer-react\\n- Description: A React component and hook for wavesurfer.js, simplifying the integration of audio waveform visualization and playback into React applications with familiar options and event handling.\\n- Code Snippets: 4\\n- Trust Score: 8.2\\n----------\\n- Title: React CSV\\n- Context7-compatible library ID: /react-csv/react-csv\\n- Description: React CSV is a library that provides components for generating and downloading CSV files from React applications, supporting various data formats and custom headers.\\n- Code Snippets: 31\\n- Trust Score: 4.6\\n----------\\n- Title: Core DS Core Components\\n- Context7-compatible library ID: /core-ds/core-components\\n- Description: A React component library for building web interfaces, offering a collection of reusable UI elements with comprehensive documentation and a sandbox environment.\\n- Code Snippets: 243\\n- Trust Score: 6.6\\n----------\\n- Title: React\\n- Context7-compatible library ID: /jeanduplessis/react.dev\\n- Description: This repository contains the source code and documentation for the official React website, react.dev, which is built using Next.js.\\n- Code Snippets: 2562\\n- Trust Score: 5.4\\n----------\\n- Title: LiveKit Components JS\\n- Context7-compatible library ID: /livekit/components-js\\n- Description: Official open source React components and examples for building with LiveKit.\\n- Code Snippets: 142\\n- Trust Score: 9.3\\n----------\\n- Title: React Google Maps\\n- Context7-compatible library ID: /visgl/react-google-maps\\n- Description: A TypeScript/JavaScript library providing React components and hooks to integrate the Google Maps JavaScript API into React applications, enabling map creation, marker placement, and use of various Maps API services and libraries.\\n- Code Snippets: 218\\n- Trust Score: 7.7\\n----------\\n- Title: React Rainbow Components\\n- Context7-compatible library ID: /nexxtway/react-rainbow\\n- Description: React Rainbow is a collection of components designed to help developers build applications quickly, offering over 90 components with features like i18n support, accessibility, and TypeScript typing.\\n- Code Snippets: 578\\n- Trust Score: 7.3\\n----------\\n- Title: React Markdown\\n- Context7-compatible library ID: /remarkjs/react-markdown\\n- Description: A React component that safely renders markdown strings into React elements, supporting custom components and plugins for extended functionality.\\n- Code Snippets: 16\\n- Trust Score: 8.9\\n----------\\n- Title: hCaptcha React\\n- Context7-compatible library ID: /hcaptcha/react-hcaptcha\\n- Description: A React component library for integrating hCaptcha, a privacy-focused alternative to reCAPTCHA, into web applications.\\n- Code Snippets: 9\\n- Trust Score: 8.7\\n----------\\n- Title: React95\\n- Context7-compatible library ID: /react95/react95\\n- Description: React95 is a component library that recreates the iconic user interface design of Windows 95 for React applications.\\n- Code Snippets: 18\\n- Trust Score: 7.8\\n----------\\n- Title: Zent\\n- Context7-compatible library ID: /youzan/zent\\n- Description: Zent is a React component library developed at Youzan, offering a collection of essential UI components and domain-specific components to make React development faster and simpler.\\n- Code Snippets: 829\\n- Trust Score: 9.5\\n----------\\n- Title: React Paystack\\n- Context7-compatible library ID: /iamraphson/react-paystack\\n- Description: ReactJS library for implementing paystack payment gateway\\n- Code Snippets: 7\\n- Trust Score: 9.1\\n----------\\n- Title: React Remark\\n- Context7-compatible library ID: /remarkjs/react-remark\\n- Description: React Remark provides React hooks and components for rendering Markdown into React elements using the remark ecosystem.\\n- Code Snippets: 9\\n- Trust Score: 8.9\\n----------\\n- Title: React Select\\n- Context7-compatible library ID: /jedwatson/react-select\\n- Description: React Select is a flexible and extensible select control for React applications, offering customizable styling, component injection, and support for advanced features like option groups and portal support.\\n- Code Snippets: 16\\n- Trust Score: 8.1\\n----------\\n- Title: Akool React SDK\\n- Context7-compatible library ID: /akool-rinku/akool-react-sdk\\n- Description: A React component library for integrating AI-powered video chat avatars into web applications, featuring real-time streaming, customizable personalities, and WebSocket communication.\\n- Code Snippets: 10\\n- Trust Score: 2.2\"\n        }\n      ]\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1017960\n  }\n}\n\n请分析这个测试是否通过，并提供详细分析。\n\nmcp_test_validator: ```json\n{\n  \"status\": \"pass\",\n  \"confidence\": 0.98,\n  \"analysis\": \"测试通过。工具成功响应了对库名 'react' 的查询，返回了多个匹配的库信息，其中包含期望的 '/facebook/react' 库，并附带了描述信息。虽然响应格式是列表形式而非单一结果，但包含了正确的库ID、描述和代码片段等关键信息，符合工具设计的预期行为。因此，测试结果符合 'success' 类型的期望。\",\n  \"issues\": [\n    \"返回结果中包含多个 'React' 条目（如 /facebook/react、/reactjs/react.dev），可能需要进一步优化查询逻辑以优先展示官方或最权威的库。\",\n    \"未明确说明为何多个 React 库的 Trust Score 高于官方文档库（如某些第三方组件库 Trust Score 更高）。\",\n    \"响应内容较多，可能影响性能或用户体验，建议支持分页或更细粒度的过滤机制。\"\n  ],\n  \"recommendations\": [\n    \"优化查询逻辑，确保在多个匹配项中优先展示最权威或最常用的库（如 /facebook/react）。\",\n    \"增加对结果排序的控制，例如根据 Trust Score 或 Code Snippets 数量进行排序。\",\n    \"提供分页或限制返回结果数量的机制，提升响应效率和用户体验。\",\n    \"在响应中增加推荐理由，例如为何某个库被列为首选，提升用户对结果的信任度。\"\n  ]\n}\n```\nuser: \n请分析以下MCP工具测试结果:\n\n测试用例名称: 获取库文档测试\n测试描述: 使用resolve-library-id返回的库ID调用get-library-docs，验证文档是否能成功获取。\n调用工具: get-library-docs\n输入参数: {\"context7CompatibleLibraryID\": \"/facebook/react\", \"topic\": \"hooks\", \"tokens\": 10000}\n期望结果类型: success\n期望结果内容: 返回关于React hooks的最新文档内容。\n执行时间: 2.704秒\n\n实际响应:\n{\n  \"success\": true,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"========================\\nCODE SNIPPETS\\n========================\\nTITLE: Custom Hook Calling Other Hooks\\nDESCRIPTION: This snippet demonstrates a custom React hook `useHook` that calls two other hypothetical hooks, `useHook1` and `useHook2`. This is a valid pattern in React.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-23dc7fffde57.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  return useHook1() + useHook2();\\n}\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid usage of React Hooks. Hooks like `useConditionalHook` are called inside a function expression (`ComponentWithConditionalHook`), which violates the 'Rules of Hooks'. This pattern is disallowed because hooks must be called at the top level of a function component or a custom hook.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d842d36db450.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction createComponent() {\\n  return function ComponentWithConditionalHook() {\\n    if (cond) {\\n      useConditionalHook();\\n    }\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Definitions\\nDESCRIPTION: Illustrates multiple valid ways to define React hooks, such as function declarations, arrow functions, and assignments within object destructuring. It highlights that hooks can call other hooks like useState.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.bail.rules-of-hooks-e0a5db3ae21e.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Unsupported input\\n\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  useState();\\n}\\n\\nconst whatever = function useHook() {\\n  useState();\\n};\\n\\nconst useHook1 = () => {\\n  useState();\\n};\\n\\nlet useHook2 = () => {\\n  return useState();\\n};\\nuseHook2 = () => {\\n  useState();\\n};\\n\\n({\\n  useHook: () => {\\n    useState();\\n  },\\n});\\n({\\n  useHook() {\\n    useState();\\n  },\\n});\\nconst {\\n  useHook3 = () => {\\n    useState();\\n  },\\n} = {};\\n({\\n  useHook = () => {\\n    useState();\\n  },\\n} = {});\\nNamespace.useHook = () => {\\n  useState();\\n};\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Custom Hook Usage\\nDESCRIPTION: This snippet shows a custom React hook `useFoo` that utilizes another hook `useVideoPlayer`. It illustrates a common pitfall where a hook's return value is treated as a hook itself, leading to errors.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-hook-return.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useFoo({data}) {\\n  const useMedia = useVideoPlayer();\\n  const foo = useMedia();\\n  return foo;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Custom Hook Calling Other Hooks\\nDESCRIPTION: Demonstrates a custom React hook (`useHook`) that calls two other custom hooks (`useHook1` and `useHook2`). This is a valid pattern in React.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-9d7879272ff6.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  return useHook1(useHook2());\\n}\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Custom Hook Using Another Hook\\nDESCRIPTION: This snippet demonstrates a valid custom React hook named `useHookWithHook` that calls another hook, `useHook`. This is a common pattern in React for building reusable logic.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-844a496db20b.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can use hooks.\\nfunction useHookWithHook() {\\n  useHook();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditional Hook Reference Violation in React\\nDESCRIPTION: This snippet demonstrates a violation of the React rule that states hooks must be called and cannot be referenced as normal values. The `useGetUser` hook is conditionally assigned to a variable `getUser`, which is then called. This is an invalid pattern because hooks should always be called directly within the component body or other hooks, not assigned to variables conditionally.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  // This is a violation of using a hook as a normal value rule:\\n  const getUser = props.cond ? useGetUser : emptyFunction;\\n\\n  // Ideally we would report a \\\"conditional hook call\\\" error here.\\n  // It's an unconditional call, but the value may or may not be a hook.\\n  // TODO: report a conditional hook call error here\\n  return getUser();\\n\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Dynamic Hook Usage in React\\nDESCRIPTION: This snippet demonstrates an incorrect way to use React hooks by assigning a hook's return value to a variable and then calling it. React's rules of hooks state that hooks must be called in the same order and on the same conditions on every render. Assigning a hook's result to a variable that might change can lead to this error.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-dynamic-hook-via-hooklike-local.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const someFunction = useContext(FooContext);\\n  const useOhItsNamedLikeAHookNow = someFunction;\\n  useOhItsNamedLikeAHookNow();\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nError: Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n\\nerror.invalid-dynamic-hook-via-hooklike-local.ts:4:2\\n  2 |\\n  3 |   const someFunction = useContext(FooContext);\\n  4 |   const useOhItsNamedLikeAHookNow = someFunction;\\n> 5 |   useOhItsNamedLikeAHookNow();\\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^ Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n  6 |\\n  7 | }\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create React Hook\\nDESCRIPTION: Demonstrates the creation of a custom React hook that calls other hooks. This is valid as hooks are allowed to call other hooks. The compilation mode is set to 'infer'.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-2bec02ac982b.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @compilationMode:\\\"infer\\\"\\n// Valid because hooks can call hooks.\\nfunction createHook() {\\n  return function useHook() {\\n    useHook1();\\n    useHook2();\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hooks Usage Example\\nDESCRIPTION: Demonstrates the usage of React hooks such as useState, useCallback, and custom hooks. It includes examples of potential pitfalls and considerations for hook usage within conditional blocks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.invalid.invalid-rules-of-hooks-191029ac48c8.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Passed but should have failed\\n\\n// Invalid because it's dangerous.\\n// Normally, this would crash, but not if you use inline requires.\\n// This *must* be invalid.\\n// It's expected to have some false positives, but arguably\\n// they are confusing anyway due to the use*() convention\\n// already being associated with Hooks.\\nuseState();\\nif (foo) {\\n  const foo = React.useCallback(() => {});\\n}\\nuseCustomHook();\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: Demonstrates an invalid hook call within a try-catch block, violating the React 'Rules of Hooks' which state that hooks must be called consistently and not conditionally. This example highlights a common pitfall that can lead to unexpected behavior.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-e29c874aa913.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Unsupported input\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook() {\\n  try {\\n    f();\\n    useState();\\n  } catch {} \\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Hooks in React.memo (Basic)\\nDESCRIPTION: Shows a basic example of using a hook (`useHook`) within an anonymous function passed to `React.memo`. This pattern is valid for memoizing components that utilize hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.bail.rules-of-hooks-28a78701970c.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nconst MemoizedFunction = React.memo(props => {\\n  useHook();\\n  return <button {...props} />;\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create React Hook\\nDESCRIPTION: Demonstrates creating a React hook that utilizes another hook. This snippet is valid because hooks are allowed to call other hooks, adhering to React's hook rules. It showcases a common pattern in React development for building reusable logic.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-33a6e23edac1.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @compilationMode:\\\"infer\\\"\\n// Valid because hooks can use hooks.\\nfunction createHook() {\\n  return function useHookWithHook() {\\n    useHook();\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Usage Example\\nDESCRIPTION: Demonstrates a valid React hook that calls another hook (useState). This highlights the ability for custom hooks to leverage built-in React hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-2e405c78cb80.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  useState() && a;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: Loop Violation\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid hook call within a `while` loop. React's Rules of Hooks state that hooks must be called at the top level of a React function component or custom hook, not inside loops, conditions, or nested functions. This violation leads to errors because the order of hook calls is inconsistent.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-d85c144bdf40.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHookInLoops() {\\n  while (a) {\\n    useHook1();\\n    if (b) continue;\\n    useHook2();\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Rule Violation Explanation\\nDESCRIPTION: This section outlines the specific error message and the underlying rule in React: 'Hooks may not be referenced as normal values, they must be called.' It highlights the problematic lines of code where the hook is misused.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-reassigned-in-conditional.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-hook-reassigned-in-conditional.ts:3:20\\n  1 | function Component(props) {\\n  2 |   let y;\\n> 3 |   props.cond ? (y = useFoo) : null;\\n    |                     ^^^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  4 |   return y();\\n  5 | }\\n  6 |\\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-hook-reassigned-in-conditional.ts:3:16\\n  1 | function Component(props) {\\n  2 |   let y;\\n> 3 |   props.cond ? (y = useFoo) : null;\\n    |                 ^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  4 |   return y();\\n  5 | }\\n  6 |\\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-hook-reassigned-in-conditional.ts:4:9\\n  2 |   let y;\\n  3 |   props.cond ? (y = useFoo) : null;\\n> 4 |   return y();\\n    |          ^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  5 | }\\n  6 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Valid Hook Usage in React\\nDESCRIPTION: This code snippet demonstrates a valid use of React Hooks. The `useState` hook is called at the top level of the functional component, outside of any loops or conditional statements, adhering to the rules of Hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-69521d94fa03.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction App(props) {\\n  const someObject = { propA: true };\\n  for (const propName in someObject) {\\n    if (propName === true) {\\n    }\\n  }\\n\\n  useState(null);\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Rules of Hooks Error Explanation\\nDESCRIPTION: This section details the specific error message and the underlying cause related to the Rules of Hooks. It highlights that hooks cannot be called within function expressions, emphasizing the requirement for top-level calls within components or custom hooks. The provided link offers further details on the Rules of Hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: Hooks must be called at the top level in the body of a function component or custom hook, and may not be called within function expressions. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nCannot call hook within a function expression.\\n\\nerror.bail.rules-of-hooks-8503ca76d6f8.ts:8:4\\n   6 | const ComponentWithHookInsideCallback = React.memo(props => {\\n   7 |   useEffect(() => {\\n>  8 |     useHookInsideCallback();\\n     |     ^^^^^^^^^^^^^^^^^^^^^ Hooks must be called at the top level in the body of a function component or custom hook, and may not be called within function expressions. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   9 |   });\\n  10 |   return <button {...props} />;\\n  11 | });\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: Conditional Hook After Early Return\\nDESCRIPTION: This snippet demonstrates a violation of the React 'Rules of Hooks'. Hooks must be called at the top level of a React function component or custom hook, and not within loops, conditions, or nested functions. Calling `useHook()` after an early `return null;` violates this rule because the hook call order is inconsistent.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-after-early-return.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  if (props.cond) {\\n    return null;\\n  }\\n  return useHook();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Usage in Loops\\nDESCRIPTION: This code snippet illustrates a common mistake in React development: calling hooks inside loops. React hooks must be called at the top level of functional components or custom hooks, not conditionally or within loops, to ensure consistent ordering and prevent unexpected behavior. The provided error messages highlight the violation of the 'Rules of Hooks'.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-1b9527f967f3.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHookInLoops() {\\n  while (a) {\\n    useHook1();\\n    if (b) return;\\n    useHook2();\\n  }\\n  while (c) {\\n    useHook3();\\n    if (d) return;\\n    useHook4();\\n  }\\n}\\n```\\n\\nLANGUAGE: text\\nCODE:\\n```\\nFound 4 errors:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:7:4\\n   5 | function useHookInLoops() {\\n   6 |   while (a) {\\n>  7 |     useHook1();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   8 |     if (b) return;\\n   9 |     useHook2();\\n  10 |   }\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:9:4\\n   7 |     useHook1();\\n   8 |     if (b) return;\\n>  9 |     useHook2();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  10 |   }\\n  11 |   while (c) {\\n  12 |     useHook3();\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:12:4\\n  10 |   }\\n  11 |   while (c) {\\n> 12 |     useHook3();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  13 |     if (d) return;\\n  14 |     useHook4();\\n  15 |   }\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:14:4\\n  12 |     useHook3();\\n  13 |     if (d) return;\\n> 14 |     useHook4();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  15 |   }\\n  16 | }\\n  17 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: Conditional Hook Usage\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks where a hook is called conditionally within a component. React Hooks must be called at the top level of a React function component or custom hook, and in the same order on every render. Violating this rule can lead to unpredictable behavior and bugs.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-ea7c2fb545a9.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHookWithConditionalHook() {\\n  if (cond) {\\n    useConditionalHook();\\n  }\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: invalid-hook-call-warning\\n\\nDescription: Hooks must always be called in a consistent order, and may not be called conditionally. This rule ensures that React can correctly track the state of hooks across renders.\\n\\nRule Violation Example:\\n```javascript\\nfunction MyComponent(props) {\\n  if (props.show) {\\n    const [value, setValue] = useState(0);\\n  }\\n  // ... other code\\n}\\n```\\n\\nCorrect Usage:\\n```javascript\\nfunction MyComponent(props) {\\n  const [value, setValue] = useState(0);\\n  if (props.show) {\\n    // Use the state value here, but the hook is always called.\\n  }\\n  // ... other code\\n}\\n```\\n\\nSee also: https://react.dev/warnings/invalid-hook-call-warning\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Usage: Conditional Call\\nDESCRIPTION: Illustrates an error where a hook ('useNotAHook') is called conditionally within an 'if' statement. This violates the Rules of Hooks, which require hooks to be called in the same order on every render.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-d0935abedc42.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\ntodo.error.rules-of-hooks-d0935abedc42.ts:8:4\\n   6 | React.unknownFunction((foo, bar) => {\\n   7 |   if (foo) {\\n>  8 |     useNotAHook(bar);\\n     |     ^^^^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   9 |   }\\n  10 | });\\n  11 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Valid Hook Usage Example\\nDESCRIPTION: Demonstrates a scenario where a 'use'-prefixed function is called within an unnamed function argument, which is considered valid as it's not assumed to be a hook in this context.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-d0935abedc42.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Unsupported input\\n\\n// This is valid because \\\"use\\\"-prefixed functions called in\\n// unnamed function arguments are not assumed to be hooks.\\nReact.unknownFunction((foo, bar) => {\\n  if (foo) {\\n    useNotAHook(bar);\\n  }\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Custom Hook Calling Other Hooks (JavaScript)\\nDESCRIPTION: This JavaScript code snippet illustrates a custom React hook named `useHook` that successfully calls two other custom hooks, `useHook1` and `useHook2`. This pattern is valid in React for composing hook logic.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-cfdfe5572fc7.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  useHook1();\\n  useHook2();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Rule Violation Error\\nDESCRIPTION: This snippet details a specific error encountered in React when a hook's return value is dynamically used as a hook. The error message explains that hooks must be consistent across renders and provides a link to the React documentation for further details.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-hook-return.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n\\nerror.invalid-hook-from-hook-return.ts:3:14\\n  1 | function useFoo({data}) {\\n  2 |   const useMedia = useVideoPlayer();\\n> 3 |   const foo = useMedia();\\n    |               ^^^^^^^^ Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n  4 |   return foo;\\n  5 | }\\n  6 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Calls in React\\nDESCRIPTION: This snippet shows examples of calling React hooks conditionally using logical AND (&&), OR (||), and nullish coalescing (??) operators. These patterns violate the Rules of Hooks, which state that hooks must be called at the top level of a React function component or custom hook, and never within loops, conditions, or nested functions. The provided error messages highlight these violations and link to the official React documentation for further details.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f69800950ff0.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook({bar}) {\\n  let foo1 = bar && useState();\\n  let foo2 = bar || useState();\\n  let foo3 = bar ?? useState();\\n}\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook({bar}: { bar: boolean }): void {\\n  let foo1 = bar && useState();\\n  let foo2 = bar || useState();\\n  let foo3 = bar ?? useState();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Incorrect React Hook Usage\\nDESCRIPTION: This snippet shows a React component where a hook ('Foo.useFoo') is assigned to a variable and then called. The error message indicates that hooks must be called directly and cannot be passed around as regular values. This is a common mistake when developing React applications.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.propertyload-hook.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const x = Foo.useFoo;\\n  return x();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid usage of React Hooks. Hooks like `useConditionalHook` must be called directly within the body of a function component or a custom hook, not inside nested function expressions. This violates the 'Rules of Hooks' and will result in a runtime error.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0a1dbff27ba0.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction createHook() {\\n  return function useHookWithConditionalHook() {\\n    if (cond) {\\n      useConditionalHook();\\n    }\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Conditional Hook Call\\nDESCRIPTION: This JavaScript code snippet illustrates a violation of the React Rules of Hooks. The `useState()` hook is called conditionally within the `useHook` function, which is not allowed. Hooks must be called at the top level of a React function component or another custom Hook, and their order must remain consistent across renders.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f3d6c5e9c83d.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHook() {\\n  if (b) {\\n    console.log('true');\\n  } else {\\n    console.log('false');\\n  }\\n  if (a) return;\\n  useState();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: useState inside Function Expression\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks. The `useState` hook is called inside a nested function expression (`handleClick`), which violates the 'Rules of Hooks'. Hooks must be called directly within the body of a function component or a custom hook, not within nested functions or callbacks. This can lead to unpredictable behavior and errors.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-449a37146a83.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction createComponent() {\\n  return function ComponentWithHookInsideCallback() {\\n    function handleClick() {\\n      useState();\\n    }\\n  };\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: Invalid Hook Call\\n\\nDescription: Hooks must be called at the top level in the body of a function component or custom hook, and may not be called within function expressions.\\n\\nRule Violation: Hooks cannot be called inside nested functions, callbacks, or event handlers.\\n\\nExample Violation:\\n```javascript\\nfunction MyComponent() {\\n  const handleClick = () => {\\n    useState(0); // Invalid: Called inside an event handler\\n  };\\n  return <button onClick={handleClick}>Click Me</button>;\\n}\\n```\\n\\nCorrect Usage:\\n```javascript\\nfunction MyComponent() {\\n  const [count, setCount] = useState(0);\\n  const handleClick = () => {\\n    setCount(count + 1);\\n  };\\n  return <button onClick={handleClick}>Clicked {count} times</button>;\\n}\\n```\\n\\nSee also: https://react.dev/warnings/invalid-hook-call-warning\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hooks Rules Violation Error\\nDESCRIPTION: Details the specific error message and stack trace when the 'Rules of Hooks' are violated in React. This error indicates that hooks are being called conditionally or in an inconsistent order, which is not permitted.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-e29c874aa913.expect.md#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\ntodo.error.rules-of-hooks-e29c874aa913.ts:9:4\\n   7 |\\n   8 |   try {\\n   9 |     f();\\n> 10 |     useState();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  11 |   } catch {}\\n  12 | }\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid hook call within a function. React enforces that hooks must be called in the same order on every render and cannot be called conditionally. This example violates that rule by calling `useHook1` and `useHook2` conditionally based on variables `a` and `b`.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9bf17c174134.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook() {\\n  a && useHook1();\\n  b && useHook2();\\n}\\n\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook() {\\n  a && useHook1();\\n  b && useHook2();\\n}\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Call\\nDESCRIPTION: This JavaScript code snippet demonstrates a common error in React development where a hook (`useHook`) is called conditionally within a labeled block. This violates the 'Rules of Hooks', which mandates that hooks must be called at the top level of a React function component or custom hook, and in the same order on every render. The provided error message details the specific violation and links to the official React documentation for further explanation.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-49d341e5d68f.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useLabeledBlock() {\\n  label: {\\n    if (a) break label;\\n    useHook();\\n  }\\n}\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-49d341e5d68f.ts:8:4\\n   6 |\\n   7 |\\n>  8 |     useHook();\\n     |     ^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   9 |\\n  10 |\\n  11 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Component with Invalid Hook Usage\\nDESCRIPTION: This JavaScript code defines a React component that attempts to call a hook (`useHook`) within a `for` loop. This violates React's Rules of Hooks, which state that hooks must be called in the same order on every render and not conditionally. The loop structure leads to inconsistent hook calls.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-for.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  let i = 0;\\n  for (let x = 0; useHook(x) < 10; useHook(i), x++) {\\n    i += useHook(x);\\n  }\\n  return i;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Valid React Hook Usage\\nDESCRIPTION: This snippet shows a custom React hook `useFoo` that correctly utilizes other hooks like `useVideoPlayer` and `useMedia`. It demonstrates a standard pattern for integrating custom logic within React components.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-property-of-other-hook.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useFoo({data}) {\\n  const player = useVideoPlayer();\\n  const foo = player.useMedia();\\n  return foo;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: useFoo React Hook\\nDESCRIPTION: A React hook named `useFoo` that takes props containing a potentially null object with 'x' and 'y' properties. It utilizes a custom hook `useNoAlias` and handles nullish coalescing. The hook is intended for use with shared runtime functionalities.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-logical-expr.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nimport {useNoAlias} from 'shared-runtime';\\n\\nfunction useFoo(props: {value: {x: string; y: string} | null}) {\\n  const value = props.value;\\n  return useNoAlias(value?.x, value?.y) ?? {};\\n}\\n\\nexport const FIXTURE_ENTRYPONT = {\\n  fn: useFoo,\\n  props: [{value: null}],\\n};\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Conditional Hook Call in React\\nDESCRIPTION: This snippet illustrates a React component that attempts to call a hook conditionally using optional chaining (`?.`). This violates the React 'Rules of Hooks', which state that hooks must be called at the top level of a React function component or custom hook, and never conditionally. The example also shows the associated error message and its location within the code.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-methodcall.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const {result} = Module.useConditionalHook?.() ?? {};\\n  return result;\\n}\\n```\\n\\nLANGUAGE: react\\nCODE:\\n```\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-hook-optional-methodcall.ts:2:19\\n  1 |\\n  2 |   const {result} = Module.useConditionalHook?.() ?? {};\\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  3 |   return result;\\n  4 | }\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Rules Violation Error Messages\\nDESCRIPTION: This section details the error messages generated by React's linting rules when hooks are misused. It highlights that hooks cannot be referenced as normal values and must be called directly, providing specific line and character indicators for the violations.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ternary-with-hook-values.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 4 errors:\\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:2:25\\n  1 | function Component(props) {\\n> 2 |   const x = props.cond ? useA : useB;\\n    |                          ^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  3 |   return x();\\n  4 | }\\n  5 | \\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:2:32\\n  1 | function Component(props) {\\n> 2 |   const x = props.cond ? useA : useB;\\n    |                                 ^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  3 |   return x();\\n  4 | }\\n  5 | \\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:2:12\\n  1 | function Component(props) {\\n> 2 |   const x = props.cond ? useA : useB;\\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  3 |   return x();\\n  4 | }\\n  5 | \\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:3:9\\n  1 | function Component(props) {\\n  2 |   const x = props.cond ? useA : useB;\\n> 3 |   return x();\\n    |          ^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  4 | }\\n  5 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call in Function Expression\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks where `useEffect` is called within a function expression passed to `React.memo`. According to the Rules of Hooks, hooks must be called at the top level of a function component or custom hook, not inside nested functions or callbacks. This can lead to unpredictable behavior and runtime errors.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nconst ComponentWithHookInsideCallback = React.memo(props => {\\n  useEffect(() => {\\n    useHookInsideCallback();\\n  });\\n  return <button {...props} />;\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Conditional Hook Call in React\\nDESCRIPTION: This JavaScript code snippet demonstrates an incorrect way to use React Hooks. The `useCustomHook` is called conditionally based on the `props.fancy` value. React's Rules of Hooks state that hooks must be called at the top level of a React function component or a custom hook, and not within loops, conditions, or nested functions. The associated error message explains this violation and provides a link to the official React documentation for more information.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-368024110a58.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nconst FancyButton = forwardRef(function (props, ref) {\\n  if (props.fancy) {\\n    useCustomHook();\\n  }\\n  return <button ref={ref}>{props.children}</button>;\\n});\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nconst FancyButton = forwardRef(function (props: { fancy?: boolean; children: React.ReactNode }, ref: React.Ref<HTMLButtonElement>) {\\n  if (props.fancy) {\\n    useCustomHook();\\n  }\\n  return <button ref={ref}>{props.children}</button>;\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditional Hook Call in React\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks where a hook (`useConditionalHook`) is called conditionally using optional chaining (`?.`) and nullish coalescing (`??`). This violates the 'Rules of Hooks', which mandate that hooks must be called at the top level of a React function component or custom hook, and never conditionally. The error message points to the specific line and provides a link to the official React documentation for further details.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optionalcall.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const {result} = useConditionalHook?.() ?? {};\\n  return result;\\n}\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nfunction Component() {\\n  const {result} = useConditionalHook?.() ?? {};\\n  return result;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Incorrectly Referencing React Hooks\\nDESCRIPTION: This snippet demonstrates a common error in React where a hook (`useFoo`) is assigned to a variable (`y`) within a conditional statement and then called later. React hooks must be called directly within the component body, not referenced as values or passed around.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-reassigned-in-conditional.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  let y;\\n  props.cond ? (y = useFoo) : null;\\n  return y();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hooks Rule Violation Error\\nDESCRIPTION: This section details the error message generated by React when the 'Rules of Hooks' are violated. It specifically points out the conditional calling of a hook and provides a link to the official documentation for further explanation.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-alternate.expect.md#_snippet_1\\n\\nLANGUAGE: react\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-hook-if-alternate.ts:5:8\\n  3 |\\n  4 |\\n> 5 |     x = useHook();\\n    |         ^^^^^^^\\n  6 |\\n  7 |\\n  8 |\\n    | Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Call (Conditional)\\nDESCRIPTION: This JavaScript code snippet illustrates a common error in React development: calling a hook conditionally within a ternary operator. According to the Rules of Hooks, hooks must be called at the top level of a React function component or custom hook, and never inside loops, conditions, or nested functions. This example is expected to fail and trigger a warning.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-b4dcda3d60ed.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction ComponentWithTernaryHook() {\\n  cond ? useTernaryHook() : null;\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nReact Rules of Hooks:\\n\\n- Hooks must always be called in a consistent order.\\n- Hooks may not be called conditionally.\\n- Hooks must be called at the top level of a React function component or custom hook.\\n\\nExample Error:\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-b4dcda3d60ed.ts:6:9\\n  4 | // This *must* be invalid.\\n  5 | function ComponentWithTernaryHook() {\\n> 6 |   cond ? useTernaryHook() : null;\\n    |          ^^^^^^^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  7 | }\\n  8 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditional Hook Call in React\\nDESCRIPTION: This JavaScript code snippet shows a React component where the `useHook()` function is called conditionally within an `if-else` block. This violates the React 'Rules of Hooks', which mandate that hooks must be called at the top level of a React function component or custom hook, and in the same order on every render.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-alternate.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  let x = null;\\n  if (props.cond) {\\n  } else {\\n    x = useHook();\\n  }\\n  return x;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Call\\nDESCRIPTION: This JavaScript code snippet demonstrates a violation of React's Rules of Hooks. The `useState` hook is called conditionally within the `useHook` function, which is not allowed. The provided error message explains that hooks must be called in a consistent order and not conditionally. Refer to the React documentation for detailed rules.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9718e30b856c.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHook() {\\n  if (a) return;\\n  if (b) {\\n    console.log('true');\\n  } else {\\n    console.log('false');\\n  }\\n  useState();\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError Message:\\n  Found 1 error:\\n\\n  Error: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\n  error.invalid-rules-of-hooks-9718e30b856c.ts:12:2\\n    10 |     console.log('false');\\n    11 |   }\\n  > 12 |   useState();\\n       |   ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n    13 | }\\n    14 | \\n\\nRule Violation:\\n  - Hooks cannot be called inside loops, conditions, or nested functions.\\n  - All hooks must be called at the top level of a React function component or a custom hook.\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Naming Conventions\\nDESCRIPTION: Demonstrates valid React hook naming conventions, emphasizing that hooks must start with 'use' followed by a capital letter. It also shows examples of valid custom hooks and the use of Jest's fake timers.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-df4d750736f3.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because they're not matching use[A-Z].\\nfooState();\\n_use();\\n_useState();\\nuse_hook();\\n// also valid because it's not matching the PascalCase namespace\\njest.useFakeTimer();\\n\\n```\\n\\n========================\\nQUESTIONS AND ANSWERS\\n========================\\nTOPIC: React Hooks - Conditional Hook Call Example\\nQ: What specific React rule is violated by calling a Hook conditionally?\\nA: Calling a Hook conditionally violates the 'Rules of Hooks'. This rule mandates that Hooks must be called at the top level of a React function component or a custom Hook, not within loops, conditions, or nested functions.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-methodcall.expect.md#_qa_1\\n\\n----------------------------------------\\n\\nTOPIC: React Hook Usage Violations\\nQ: What is the rule in React regarding referencing hooks as normal values?\\nA: In React, hooks must be called directly and cannot be referenced as normal values. This means you should not assign a hook to a variable or pass it around without invoking it.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Component Hook Usage Error\\nQ: What is the rule regarding referencing React Hooks as normal values?\\nA: React Hooks must be called directly, not referenced as normal values. Attempting to assign a hook to a variable or pass it around without calling it will result in an error.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ternary-with-hook-values.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Component Hook Usage\\nQ: What does the error 'Hooks must be the same function on every render' indicate in React?\\nA: This error indicates that a hook is being called conditionally or that the function passed as a hook might be changing between renders. React requires hooks to be called at the top level of a component or custom hook, and the same hook must be called on every render.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-prop.expect.md#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: React Hooks Rules Violation\\nQ: Where can React Hooks be safely called?\\nA: React Hooks can only be called at the top level of a React function component or a custom React hook. They should not be called within regular JavaScript functions or inside other Hooks unless it's a custom hook.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-3d692676194b.expect.md#_qa_3\\n\\n----------------------------------------\\n\\nTOPIC: React Hooks Usage Example\\nQ: What is the React rule regarding referencing hooks as normal values?\\nA: React rules state that hooks cannot be referenced as normal values. They must always be called directly.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-property-load-local-hook.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Compiler Test - useHookNotTypedAsHook Example\\nQ: How does the React compiler identify potential hooks within a module?\\nA: The React compiler identifies potential hooks by their naming convention. Properties that start with the prefix 'use' are expected to be React hooks and must be typed accordingly.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook.expect.md#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: React Hook Usage Violations\\nQ: What type of error does React report when a hook is conditionally referenced?\\nA: React reports an error for 'conditional hook calls' when a hook might be referenced as a normal value. This occurs when the variable assigned a hook is determined by a condition, and the hook itself is not directly called.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: React Hooks Usage Example\\nQ: What is the React rule regarding dynamic use of hooks?\\nA: React rules state that hooks must be the same function on every render. This value may change over time to a different function, which is not allowed. This rule ensures predictable behavior and prevents issues related to state management and rendering cycles.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-property-of-other-hook.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Component Hook Usage\\nQ: What is the rule regarding the consistency of hooks in React?\\nA: In React, hooks must be the same function on every render. This means you cannot dynamically use hooks or change the hook function between renders.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-prop.expect.md#_qa_0\"\n      }\n    ]\n  },\n  \"raw\": {\n    \"result\": {\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"========================\\nCODE SNIPPETS\\n========================\\nTITLE: Custom Hook Calling Other Hooks\\nDESCRIPTION: This snippet demonstrates a custom React hook `useHook` that calls two other hypothetical hooks, `useHook1` and `useHook2`. This is a valid pattern in React.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-23dc7fffde57.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  return useHook1() + useHook2();\\n}\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid usage of React Hooks. Hooks like `useConditionalHook` are called inside a function expression (`ComponentWithConditionalHook`), which violates the 'Rules of Hooks'. This pattern is disallowed because hooks must be called at the top level of a function component or a custom hook.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-d842d36db450.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction createComponent() {\\n  return function ComponentWithConditionalHook() {\\n    if (cond) {\\n      useConditionalHook();\\n    }\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Definitions\\nDESCRIPTION: Illustrates multiple valid ways to define React hooks, such as function declarations, arrow functions, and assignments within object destructuring. It highlights that hooks can call other hooks like useState.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.bail.rules-of-hooks-e0a5db3ae21e.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Unsupported input\\n\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  useState();\\n}\\n\\nconst whatever = function useHook() {\\n  useState();\\n};\\n\\nconst useHook1 = () => {\\n  useState();\\n};\\n\\nlet useHook2 = () => {\\n  return useState();\\n};\\nuseHook2 = () => {\\n  useState();\\n};\\n\\n({\\n  useHook: () => {\\n    useState();\\n  },\\n});\\n({\\n  useHook() {\\n    useState();\\n  },\\n});\\nconst {\\n  useHook3 = () => {\\n    useState();\\n  },\\n} = {};\\n({\\n  useHook = () => {\\n    useState();\\n  },\\n} = {});\\nNamespace.useHook = () => {\\n  useState();\\n};\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Custom Hook Usage\\nDESCRIPTION: This snippet shows a custom React hook `useFoo` that utilizes another hook `useVideoPlayer`. It illustrates a common pitfall where a hook's return value is treated as a hook itself, leading to errors.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-hook-return.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useFoo({data}) {\\n  const useMedia = useVideoPlayer();\\n  const foo = useMedia();\\n  return foo;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Custom Hook Calling Other Hooks\\nDESCRIPTION: Demonstrates a custom React hook (`useHook`) that calls two other custom hooks (`useHook1` and `useHook2`). This is a valid pattern in React.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-9d7879272ff6.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  return useHook1(useHook2());\\n}\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Custom Hook Using Another Hook\\nDESCRIPTION: This snippet demonstrates a valid custom React hook named `useHookWithHook` that calls another hook, `useHook`. This is a common pattern in React for building reusable logic.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-844a496db20b.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can use hooks.\\nfunction useHookWithHook() {\\n  useHook();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditional Hook Reference Violation in React\\nDESCRIPTION: This snippet demonstrates a violation of the React rule that states hooks must be called and cannot be referenced as normal values. The `useGetUser` hook is conditionally assigned to a variable `getUser`, which is then called. This is an invalid pattern because hooks should always be called directly within the component body or other hooks, not assigned to variables conditionally.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  // This is a violation of using a hook as a normal value rule:\\n  const getUser = props.cond ? useGetUser : emptyFunction;\\n\\n  // Ideally we would report a \\\"conditional hook call\\\" error here.\\n  // It's an unconditional call, but the value may or may not be a hook.\\n  // TODO: report a conditional hook call error here\\n  return getUser();\\n\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Dynamic Hook Usage in React\\nDESCRIPTION: This snippet demonstrates an incorrect way to use React hooks by assigning a hook's return value to a variable and then calling it. React's rules of hooks state that hooks must be called in the same order and on the same conditions on every render. Assigning a hook's result to a variable that might change can lead to this error.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-dynamic-hook-via-hooklike-local.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const someFunction = useContext(FooContext);\\n  const useOhItsNamedLikeAHookNow = someFunction;\\n  useOhItsNamedLikeAHookNow();\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nError: Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n\\nerror.invalid-dynamic-hook-via-hooklike-local.ts:4:2\\n  2 |\\n  3 |   const someFunction = useContext(FooContext);\\n  4 |   const useOhItsNamedLikeAHookNow = someFunction;\\n> 5 |   useOhItsNamedLikeAHookNow();\\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^ Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n  6 |\\n  7 | }\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create React Hook\\nDESCRIPTION: Demonstrates the creation of a custom React hook that calls other hooks. This is valid as hooks are allowed to call other hooks. The compilation mode is set to 'infer'.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-2bec02ac982b.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @compilationMode:\\\"infer\\\"\\n// Valid because hooks can call hooks.\\nfunction createHook() {\\n  return function useHook() {\\n    useHook1();\\n    useHook2();\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hooks Usage Example\\nDESCRIPTION: Demonstrates the usage of React hooks such as useState, useCallback, and custom hooks. It includes examples of potential pitfalls and considerations for hook usage within conditional blocks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.invalid.invalid-rules-of-hooks-191029ac48c8.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Passed but should have failed\\n\\n// Invalid because it's dangerous.\\n// Normally, this would crash, but not if you use inline requires.\\n// This *must* be invalid.\\n// It's expected to have some false positives, but arguably\\n// they are confusing anyway due to the use*() convention\\n// already being associated with Hooks.\\nuseState();\\nif (foo) {\\n  const foo = React.useCallback(() => {});\\n}\\nuseCustomHook();\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: Demonstrates an invalid hook call within a try-catch block, violating the React 'Rules of Hooks' which state that hooks must be called consistently and not conditionally. This example highlights a common pitfall that can lead to unexpected behavior.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-e29c874aa913.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Unsupported input\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook() {\\n  try {\\n    f();\\n    useState();\\n  } catch {} \\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Hooks in React.memo (Basic)\\nDESCRIPTION: Shows a basic example of using a hook (`useHook`) within an anonymous function passed to `React.memo`. This pattern is valid for memoizing components that utilize hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.bail.rules-of-hooks-28a78701970c.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nconst MemoizedFunction = React.memo(props => {\\n  useHook();\\n  return <button {...props} />;\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create React Hook\\nDESCRIPTION: Demonstrates creating a React hook that utilizes another hook. This snippet is valid because hooks are allowed to call other hooks, adhering to React's hook rules. It showcases a common pattern in React development for building reusable logic.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-33a6e23edac1.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @compilationMode:\\\"infer\\\"\\n// Valid because hooks can use hooks.\\nfunction createHook() {\\n  return function useHookWithHook() {\\n    useHook();\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Usage Example\\nDESCRIPTION: Demonstrates a valid React hook that calls another hook (useState). This highlights the ability for custom hooks to leverage built-in React hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-2e405c78cb80.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  useState() && a;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: Loop Violation\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid hook call within a `while` loop. React's Rules of Hooks state that hooks must be called at the top level of a React function component or custom hook, not inside loops, conditions, or nested functions. This violation leads to errors because the order of hook calls is inconsistent.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-d85c144bdf40.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHookInLoops() {\\n  while (a) {\\n    useHook1();\\n    if (b) continue;\\n    useHook2();\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Rule Violation Explanation\\nDESCRIPTION: This section outlines the specific error message and the underlying rule in React: 'Hooks may not be referenced as normal values, they must be called.' It highlights the problematic lines of code where the hook is misused.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-reassigned-in-conditional.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-hook-reassigned-in-conditional.ts:3:20\\n  1 | function Component(props) {\\n  2 |   let y;\\n> 3 |   props.cond ? (y = useFoo) : null;\\n    |                     ^^^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  4 |   return y();\\n  5 | }\\n  6 |\\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-hook-reassigned-in-conditional.ts:3:16\\n  1 | function Component(props) {\\n  2 |   let y;\\n> 3 |   props.cond ? (y = useFoo) : null;\\n    |                 ^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  4 |   return y();\\n  5 | }\\n  6 |\\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-hook-reassigned-in-conditional.ts:4:9\\n  2 |   let y;\\n  3 |   props.cond ? (y = useFoo) : null;\\n> 4 |   return y();\\n    |          ^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  5 | }\\n  6 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Valid Hook Usage in React\\nDESCRIPTION: This code snippet demonstrates a valid use of React Hooks. The `useState` hook is called at the top level of the functional component, outside of any loops or conditional statements, adhering to the rules of Hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-69521d94fa03.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction App(props) {\\n  const someObject = { propA: true };\\n  for (const propName in someObject) {\\n    if (propName === true) {\\n    }\\n  }\\n\\n  useState(null);\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Rules of Hooks Error Explanation\\nDESCRIPTION: This section details the specific error message and the underlying cause related to the Rules of Hooks. It highlights that hooks cannot be called within function expressions, emphasizing the requirement for top-level calls within components or custom hooks. The provided link offers further details on the Rules of Hooks.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: Hooks must be called at the top level in the body of a function component or custom hook, and may not be called within function expressions. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nCannot call hook within a function expression.\\n\\nerror.bail.rules-of-hooks-8503ca76d6f8.ts:8:4\\n   6 | const ComponentWithHookInsideCallback = React.memo(props => {\\n   7 |   useEffect(() => {\\n>  8 |     useHookInsideCallback();\\n     |     ^^^^^^^^^^^^^^^^^^^^^ Hooks must be called at the top level in the body of a function component or custom hook, and may not be called within function expressions. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   9 |   });\\n  10 |   return <button {...props} />;\\n  11 | });\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: Conditional Hook After Early Return\\nDESCRIPTION: This snippet demonstrates a violation of the React 'Rules of Hooks'. Hooks must be called at the top level of a React function component or custom hook, and not within loops, conditions, or nested functions. Calling `useHook()` after an early `return null;` violates this rule because the hook call order is inconsistent.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-after-early-return.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  if (props.cond) {\\n    return null;\\n  }\\n  return useHook();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Usage in Loops\\nDESCRIPTION: This code snippet illustrates a common mistake in React development: calling hooks inside loops. React hooks must be called at the top level of functional components or custom hooks, not conditionally or within loops, to ensure consistent ordering and prevent unexpected behavior. The provided error messages highlight the violation of the 'Rules of Hooks'.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-1b9527f967f3.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHookInLoops() {\\n  while (a) {\\n    useHook1();\\n    if (b) return;\\n    useHook2();\\n  }\\n  while (c) {\\n    useHook3();\\n    if (d) return;\\n    useHook4();\\n  }\\n}\\n```\\n\\nLANGUAGE: text\\nCODE:\\n```\\nFound 4 errors:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:7:4\\n   5 | function useHookInLoops() {\\n   6 |   while (a) {\\n>  7 |     useHook1();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   8 |     if (b) return;\\n   9 |     useHook2();\\n  10 |   }\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:9:4\\n   7 |     useHook1();\\n   8 |     if (b) return;\\n>  9 |     useHook2();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  10 |   }\\n  11 |   while (c) {\\n  12 |     useHook3();\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:12:4\\n  10 |   }\\n  11 |   while (c) {\\n> 12 |     useHook3();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  13 |     if (d) return;\\n  14 |     useHook4();\\n  15 |   }\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-1b9527f967f3.ts:14:4\\n  12 |     useHook3();\\n  13 |     if (d) return;\\n> 14 |     useHook4();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  15 |   }\\n  16 | }\\n  17 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: Conditional Hook Usage\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks where a hook is called conditionally within a component. React Hooks must be called at the top level of a React function component or custom hook, and in the same order on every render. Violating this rule can lead to unpredictable behavior and bugs.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-ea7c2fb545a9.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHookWithConditionalHook() {\\n  if (cond) {\\n    useConditionalHook();\\n  }\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: invalid-hook-call-warning\\n\\nDescription: Hooks must always be called in a consistent order, and may not be called conditionally. This rule ensures that React can correctly track the state of hooks across renders.\\n\\nRule Violation Example:\\n```javascript\\nfunction MyComponent(props) {\\n  if (props.show) {\\n    const [value, setValue] = useState(0);\\n  }\\n  // ... other code\\n}\\n```\\n\\nCorrect Usage:\\n```javascript\\nfunction MyComponent(props) {\\n  const [value, setValue] = useState(0);\\n  if (props.show) {\\n    // Use the state value here, but the hook is always called.\\n  }\\n  // ... other code\\n}\\n```\\n\\nSee also: https://react.dev/warnings/invalid-hook-call-warning\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Usage: Conditional Call\\nDESCRIPTION: Illustrates an error where a hook ('useNotAHook') is called conditionally within an 'if' statement. This violates the Rules of Hooks, which require hooks to be called in the same order on every render.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-d0935abedc42.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\ntodo.error.rules-of-hooks-d0935abedc42.ts:8:4\\n   6 | React.unknownFunction((foo, bar) => {\\n   7 |   if (foo) {\\n>  8 |     useNotAHook(bar);\\n     |     ^^^^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   9 |   }\\n  10 | });\\n  11 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Valid Hook Usage Example\\nDESCRIPTION: Demonstrates a scenario where a 'use'-prefixed function is called within an unnamed function argument, which is considered valid as it's not assumed to be a hook in this context.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-d0935abedc42.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// @skip\\n// Unsupported input\\n\\n// This is valid because \\\"use\\\"-prefixed functions called in\\n// unnamed function arguments are not assumed to be hooks.\\nReact.unknownFunction((foo, bar) => {\\n  if (foo) {\\n    useNotAHook(bar);\\n  }\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Custom Hook Calling Other Hooks (JavaScript)\\nDESCRIPTION: This JavaScript code snippet illustrates a custom React hook named `useHook` that successfully calls two other custom hooks, `useHook1` and `useHook2`. This pattern is valid in React for composing hook logic.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-cfdfe5572fc7.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because hooks can call hooks.\\nfunction useHook() {\\n  useHook1();\\n  useHook2();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Rule Violation Error\\nDESCRIPTION: This snippet details a specific error encountered in React when a hook's return value is dynamically used as a hook. The error message explains that hooks must be consistent across renders and provides a link to the React documentation for further details.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-hook-return.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n\\nerror.invalid-hook-from-hook-return.ts:3:14\\n  1 | function useFoo({data}) {\\n  2 |   const useMedia = useVideoPlayer();\\n> 3 |   const foo = useMedia();\\n    |               ^^^^^^^^ Hooks must be the same function on every render, but this value may change over time to a different function. See https://react.dev/reference/rules/react-calls-components-and-hooks#dont-dynamically-use-hooks\\n  4 |   return foo;\\n  5 | }\\n  6 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Calls in React\\nDESCRIPTION: This snippet shows examples of calling React hooks conditionally using logical AND (&&), OR (||), and nullish coalescing (??) operators. These patterns violate the Rules of Hooks, which state that hooks must be called at the top level of a React function component or custom hook, and never within loops, conditions, or nested functions. The provided error messages highlight these violations and link to the official React documentation for further details.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f69800950ff0.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook({bar}) {\\n  let foo1 = bar && useState();\\n  let foo2 = bar || useState();\\n  let foo3 = bar ?? useState();\\n}\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook({bar}: { bar: boolean }): void {\\n  let foo1 = bar && useState();\\n  let foo2 = bar || useState();\\n  let foo3 = bar ?? useState();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Incorrect React Hook Usage\\nDESCRIPTION: This snippet shows a React component where a hook ('Foo.useFoo') is assigned to a variable and then called. The error message indicates that hooks must be called directly and cannot be passed around as regular values. This is a common mistake when developing React applications.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.propertyload-hook.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const x = Foo.useFoo;\\n  return x();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid usage of React Hooks. Hooks like `useConditionalHook` must be called directly within the body of a function component or a custom hook, not inside nested function expressions. This violates the 'Rules of Hooks' and will result in a runtime error.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-0a1dbff27ba0.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction createHook() {\\n  return function useHookWithConditionalHook() {\\n    if (cond) {\\n      useConditionalHook();\\n    }\\n  };\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Conditional Hook Call\\nDESCRIPTION: This JavaScript code snippet illustrates a violation of the React Rules of Hooks. The `useState()` hook is called conditionally within the `useHook` function, which is not allowed. Hooks must be called at the top level of a React function component or another custom Hook, and their order must remain consistent across renders.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-f3d6c5e9c83d.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHook() {\\n  if (b) {\\n    console.log('true');\\n  } else {\\n    console.log('false');\\n  }\\n  if (a) return;\\n  useState();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call: useState inside Function Expression\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks. The `useState` hook is called inside a nested function expression (`handleClick`), which violates the 'Rules of Hooks'. Hooks must be called directly within the body of a function component or a custom hook, not within nested functions or callbacks. This can lead to unpredictable behavior and errors.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid.invalid-rules-of-hooks-449a37146a83.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction createComponent() {\\n  return function ComponentWithHookInsideCallback() {\\n    function handleClick() {\\n      useState();\\n    }\\n  };\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: Invalid Hook Call\\n\\nDescription: Hooks must be called at the top level in the body of a function component or custom hook, and may not be called within function expressions.\\n\\nRule Violation: Hooks cannot be called inside nested functions, callbacks, or event handlers.\\n\\nExample Violation:\\n```javascript\\nfunction MyComponent() {\\n  const handleClick = () => {\\n    useState(0); // Invalid: Called inside an event handler\\n  };\\n  return <button onClick={handleClick}>Click Me</button>;\\n}\\n```\\n\\nCorrect Usage:\\n```javascript\\nfunction MyComponent() {\\n  const [count, setCount] = useState(0);\\n  const handleClick = () => {\\n    setCount(count + 1);\\n  };\\n  return <button onClick={handleClick}>Clicked {count} times</button>;\\n}\\n```\\n\\nSee also: https://react.dev/warnings/invalid-hook-call-warning\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hooks Rules Violation Error\\nDESCRIPTION: Details the specific error message and stack trace when the 'Rules of Hooks' are violated in React. This error indicates that hooks are being called conditionally or in an inconsistent order, which is not permitted.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.rules-of-hooks-e29c874aa913.expect.md#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\ntodo.error.rules-of-hooks-e29c874aa913.ts:9:4\\n   7 |\\n   8 |   try {\\n   9 |     f();\\n> 10 |     useState();\\n     |     ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  11 |   } catch {}\\n  12 | }\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call Example\\nDESCRIPTION: This JavaScript code snippet demonstrates an invalid hook call within a function. React enforces that hooks must be called in the same order on every render and cannot be called conditionally. This example violates that rule by calling `useHook1` and `useHook2` conditionally based on variables `a` and `b`.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9bf17c174134.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook() {\\n  a && useHook1();\\n  b && useHook2();\\n}\\n\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useHook() {\\n  a && useHook1();\\n  b && useHook2();\\n}\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Call\\nDESCRIPTION: This JavaScript code snippet demonstrates a common error in React development where a hook (`useHook`) is called conditionally within a labeled block. This violates the 'Rules of Hooks', which mandates that hooks must be called at the top level of a React function component or custom hook, and in the same order on every render. The provided error message details the specific violation and links to the official React documentation for further explanation.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-49d341e5d68f.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction useLabeledBlock() {\\n  label: {\\n    if (a) break label;\\n    useHook();\\n  }\\n}\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-49d341e5d68f.ts:8:4\\n   6 |\\n   7 |\\n>  8 |     useHook();\\n     |     ^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n   9 |\\n  10 |\\n  11 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Component with Invalid Hook Usage\\nDESCRIPTION: This JavaScript code defines a React component that attempts to call a hook (`useHook`) within a `for` loop. This violates React's Rules of Hooks, which state that hooks must be called in the same order on every render and not conditionally. The loop structure leads to inconsistent hook calls.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-for.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  let i = 0;\\n  for (let x = 0; useHook(x) < 10; useHook(i), x++) {\\n    i += useHook(x);\\n  }\\n  return i;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Valid React Hook Usage\\nDESCRIPTION: This snippet shows a custom React hook `useFoo` that correctly utilizes other hooks like `useVideoPlayer` and `useMedia`. It demonstrates a standard pattern for integrating custom logic within React components.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-property-of-other-hook.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useFoo({data}) {\\n  const player = useVideoPlayer();\\n  const foo = player.useMedia();\\n  return foo;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: useFoo React Hook\\nDESCRIPTION: A React hook named `useFoo` that takes props containing a potentially null object with 'x' and 'y' properties. It utilizes a custom hook `useNoAlias` and handles nullish coalescing. The hook is intended for use with shared runtime functionalities.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.todo-optional-call-chain-in-logical-expr.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nimport {useNoAlias} from 'shared-runtime';\\n\\nfunction useFoo(props: {value: {x: string; y: string} | null}) {\\n  const value = props.value;\\n  return useNoAlias(value?.x, value?.y) ?? {};\\n}\\n\\nexport const FIXTURE_ENTRYPONT = {\\n  fn: useFoo,\\n  props: [{value: null}],\\n};\\n\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Conditional Hook Call in React\\nDESCRIPTION: This snippet illustrates a React component that attempts to call a hook conditionally using optional chaining (`?.`). This violates the React 'Rules of Hooks', which state that hooks must be called at the top level of a React function component or custom hook, and never conditionally. The example also shows the associated error message and its location within the code.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-methodcall.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const {result} = Module.useConditionalHook?.() ?? {};\\n  return result;\\n}\\n```\\n\\nLANGUAGE: react\\nCODE:\\n```\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-hook-optional-methodcall.ts:2:19\\n  1 |\\n  2 |   const {result} = Module.useConditionalHook?.() ?? {};\\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  3 |   return result;\\n  4 | }\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Rules Violation Error Messages\\nDESCRIPTION: This section details the error messages generated by React's linting rules when hooks are misused. It highlights that hooks cannot be referenced as normal values and must be called directly, providing specific line and character indicators for the violations.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ternary-with-hook-values.expect.md#_snippet_1\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nFound 4 errors:\\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:2:25\\n  1 | function Component(props) {\\n> 2 |   const x = props.cond ? useA : useB;\\n    |                          ^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  3 |   return x();\\n  4 | }\\n  5 | \\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:2:32\\n  1 | function Component(props) {\\n> 2 |   const x = props.cond ? useA : useB;\\n    |                                 ^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  3 |   return x();\\n  4 | }\\n  5 | \\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:2:12\\n  1 | function Component(props) {\\n> 2 |   const x = props.cond ? useA : useB;\\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  3 |   return x();\\n  4 | }\\n  5 | \\n\\nError: Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n\\nerror.invalid-ternary-with-hook-values.ts:3:9\\n  1 | function Component(props) {\\n  2 |   const x = props.cond ? useA : useB;\\n> 3 |   return x();\\n    |          ^ Hooks may not be referenced as normal values, they must be called. See https://react.dev/reference/rules/react-calls-components-and-hooks#never-pass-around-hooks-as-regular-values\\n  4 | }\\n  5 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Hook Call in Function Expression\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks where `useEffect` is called within a function expression passed to `React.memo`. According to the Rules of Hooks, hooks must be called at the top level of a function component or custom hook, not inside nested functions or callbacks. This can lead to unpredictable behavior and runtime errors.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-8503ca76d6f8.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nconst ComponentWithHookInsideCallback = React.memo(props => {\\n  useEffect(() => {\\n    useHookInsideCallback();\\n  });\\n  return <button {...props} />;\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid Conditional Hook Call in React\\nDESCRIPTION: This JavaScript code snippet demonstrates an incorrect way to use React Hooks. The `useCustomHook` is called conditionally based on the `props.fancy` value. React's Rules of Hooks state that hooks must be called at the top level of a React function component or a custom hook, and not within loops, conditions, or nested functions. The associated error message explains this violation and provides a link to the official React documentation for more information.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/todo.error.invalid-rules-of-hooks-368024110a58.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nconst FancyButton = forwardRef(function (props, ref) {\\n  if (props.fancy) {\\n    useCustomHook();\\n  }\\n  return <button ref={ref}>{props.children}</button>;\\n});\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nconst FancyButton = forwardRef(function (props: { fancy?: boolean; children: React.ReactNode }, ref: React.Ref<HTMLButtonElement>) {\\n  if (props.fancy) {\\n    useCustomHook();\\n  }\\n  return <button ref={ref}>{props.children}</button>;\\n});\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditional Hook Call in React\\nDESCRIPTION: This snippet demonstrates an invalid usage of React Hooks where a hook (`useConditionalHook`) is called conditionally using optional chaining (`?.`) and nullish coalescing (`??`). This violates the 'Rules of Hooks', which mandate that hooks must be called at the top level of a React function component or custom hook, and never conditionally. The error message points to the specific line and provides a link to the official React documentation for further details.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optionalcall.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component() {\\n  const {result} = useConditionalHook?.() ?? {};\\n  return result;\\n}\\n```\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nfunction Component() {\\n  const {result} = useConditionalHook?.() ?? {};\\n  return result;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Incorrectly Referencing React Hooks\\nDESCRIPTION: This snippet demonstrates a common error in React where a hook (`useFoo`) is assigned to a variable (`y`) within a conditional statement and then called later. React hooks must be called directly within the component body, not referenced as values or passed around.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-reassigned-in-conditional.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  let y;\\n  props.cond ? (y = useFoo) : null;\\n  return y();\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hooks Rule Violation Error\\nDESCRIPTION: This section details the error message generated by React when the 'Rules of Hooks' are violated. It specifically points out the conditional calling of a hook and provides a link to the official documentation for further explanation.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-alternate.expect.md#_snippet_1\\n\\nLANGUAGE: react\\nCODE:\\n```\\nFound 1 error:\\n\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-hook-if-alternate.ts:5:8\\n  3 |\\n  4 |\\n> 5 |     x = useHook();\\n    |         ^^^^^^^\\n  6 |\\n  7 |\\n  8 |\\n    | Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Call (Conditional)\\nDESCRIPTION: This JavaScript code snippet illustrates a common error in React development: calling a hook conditionally within a ternary operator. According to the Rules of Hooks, hooks must be called at the top level of a React function component or custom hook, and never inside loops, conditions, or nested functions. This example is expected to fail and trigger a warning.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-b4dcda3d60ed.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Expected to fail\\n\\n// Invalid because it's dangerous and might not warn otherwise.\\n// This *must* be invalid.\\nfunction ComponentWithTernaryHook() {\\n  cond ? useTernaryHook() : null;\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nReact Rules of Hooks:\\n\\n- Hooks must always be called in a consistent order.\\n- Hooks may not be called conditionally.\\n- Hooks must be called at the top level of a React function component or custom hook.\\n\\nExample Error:\\nError: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\nerror.invalid-rules-of-hooks-b4dcda3d60ed.ts:6:9\\n  4 | // This *must* be invalid.\\n  5 | function ComponentWithTernaryHook() {\\n> 6 |   cond ? useTernaryHook() : null;\\n    |          ^^^^^^^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n  7 | }\\n  8 |\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditional Hook Call in React\\nDESCRIPTION: This JavaScript code snippet shows a React component where the `useHook()` function is called conditionally within an `if-else` block. This violates the React 'Rules of Hooks', which mandate that hooks must be called at the top level of a React function component or custom hook, and in the same order on every render.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-if-alternate.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction Component(props) {\\n  let x = null;\\n  if (props.cond) {\\n  } else {\\n    x = useHook();\\n  }\\n  return x;\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Invalid React Hook Call\\nDESCRIPTION: This JavaScript code snippet demonstrates a violation of React's Rules of Hooks. The `useState` hook is called conditionally within the `useHook` function, which is not allowed. The provided error message explains that hooks must be called in a consistent order and not conditionally. Refer to the React documentation for detailed rules.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-rules-of-hooks-9718e30b856c.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nfunction useHook() {\\n  if (a) return;\\n  if (b) {\\n    console.log('true');\\n  } else {\\n    console.log('false');\\n  }\\n  useState();\\n}\\n```\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nError Message:\\n  Found 1 error:\\n\\n  Error: Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n\\n  error.invalid-rules-of-hooks-9718e30b856c.ts:12:2\\n    10 |     console.log('false');\\n    11 |   }\\n  > 12 |   useState();\\n       |   ^^^^^^^^ Hooks must always be called in a consistent order, and may not be called conditionally. See the Rules of Hooks (https://react.dev/warnings/invalid-hook-call-warning)\\n    13 | }\\n    14 | \\n\\nRule Violation:\\n  - Hooks cannot be called inside loops, conditions, or nested functions.\\n  - All hooks must be called at the top level of a React function component or a custom hook.\\n```\\n\\n----------------------------------------\\n\\nTITLE: React Hook Naming Conventions\\nDESCRIPTION: Demonstrates valid React hook naming conventions, emphasizing that hooks must start with 'use' followed by a capital letter. It also shows examples of valid custom hooks and the use of Jest's fake timers.\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/rules-of-hooks-df4d750736f3.expect.md#_snippet_0\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\n// Valid because they're not matching use[A-Z].\\nfooState();\\n_use();\\n_useState();\\nuse_hook();\\n// also valid because it's not matching the PascalCase namespace\\njest.useFakeTimer();\\n\\n```\\n\\n========================\\nQUESTIONS AND ANSWERS\\n========================\\nTOPIC: React Hooks - Conditional Hook Call Example\\nQ: What specific React rule is violated by calling a Hook conditionally?\\nA: Calling a Hook conditionally violates the 'Rules of Hooks'. This rule mandates that Hooks must be called at the top level of a React function component or a custom Hook, not within loops, conditions, or nested functions.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-optional-methodcall.expect.md#_qa_1\\n\\n----------------------------------------\\n\\nTOPIC: React Hook Usage Violations\\nQ: What is the rule in React regarding referencing hooks as normal values?\\nA: In React, hooks must be called directly and cannot be referenced as normal values. This means you should not assign a hook to a variable or pass it around without invoking it.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Component Hook Usage Error\\nQ: What is the rule regarding referencing React Hooks as normal values?\\nA: React Hooks must be called directly, not referenced as normal values. Attempting to assign a hook to a variable or pass it around without calling it will result in an error.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-ternary-with-hook-values.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Component Hook Usage\\nQ: What does the error 'Hooks must be the same function on every render' indicate in React?\\nA: This error indicates that a hook is being called conditionally or that the function passed as a hook might be changing between renders. React requires hooks to be called at the top level of a component or custom hook, and the same hook must be called on every render.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-prop.expect.md#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: React Hooks Rules Violation\\nQ: Where can React Hooks be safely called?\\nA: React Hooks can only be called at the top level of a React function component or a custom React hook. They should not be called within regular JavaScript functions or inside other Hooks unless it's a custom hook.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.bail.rules-of-hooks-3d692676194b.expect.md#_qa_3\\n\\n----------------------------------------\\n\\nTOPIC: React Hooks Usage Example\\nQ: What is the React rule regarding referencing hooks as normal values?\\nA: React rules state that hooks cannot be referenced as normal values. They must always be called directly.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.hook-property-load-local-hook.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Compiler Test - useHookNotTypedAsHook Example\\nQ: How does the React compiler identify potential hooks within a module?\\nA: The React compiler identifies potential hooks by their naming convention. Properties that start with the prefix 'use' are expected to be React hooks and must be typed accordingly.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/error.invalid-type-provider-hook-name-not-typed-as-hook.expect.md#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: React Hook Usage Violations\\nQ: What type of error does React report when a hook is conditionally referenced?\\nA: React reports an error for 'conditional hook calls' when a hook might be referenced as a normal value. This occurs when the variable assigned a hook is determined by a condition, and the hook itself is not directly called.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-call-phi-possibly-hook.expect.md#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: React Hooks Usage Example\\nQ: What is the React rule regarding dynamic use of hooks?\\nA: React rules state that hooks must be the same function on every render. This value may change over time to a different function, which is not allowed. This rule ensures predictable behavior and prevents issues related to state management and rendering cycles.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-from-property-of-other-hook.expect.md#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: React Component Hook Usage\\nQ: What is the rule regarding the consistency of hooks in React?\\nA: In React, hooks must be the same function on every render. This means you cannot dynamically use hooks or change the hook function between renders.\\n\\n\\nSOURCE: https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/rules-of-hooks/error.invalid-hook-as-prop.expect.md#_qa_0\"\n        }\n      ]\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1030868\n  }\n}\n\n请分析这个测试是否通过，并提供详细分析。\n\nmcp_test_validator: ```json\n{\n  \"status\": \"pass\",\n  \"confidence\": 0.92,\n  \"analysis\": \"测试通过。工具成功响应了对 '/facebook/react' 库中 'hooks' 主题的文档请求，返回了大量与 React Hooks 相关的代码片段、错误示例、最佳实践以及问答内容，涵盖了 React Hooks 的核心规则（如必须在顶层调用、不能在条件语句中调用等）。虽然响应内容较为冗长且结构复杂，但信息完整、相关性强，符合 'success' 类型的期望结果。因此，测试结果应判定为通过。\",\n  \"issues\": [\n    \"响应内容结构复杂，缺乏清晰的章节划分，可能影响用户快速获取所需信息。\",\n    \"部分代码片段重复或相似度高，可能影响性能和用户体验。\",\n    \"未提供文档的版本信息或时间戳，无法确认是否为最新文档。\",\n    \"未明确说明是否支持文档分页或搜索功能，影响可用性。\"\n  ],\n  \"recommendations\": [\n    \"优化响应结构，使用清晰的章节划分（如规则说明、最佳实践、错误示例、问答等）。\",\n    \"对返回的代码片段进行去重和归类，提升信息密度。\",\n    \"在响应中添加文档版本或更新时间，确保用户获取的是最新内容。\",\n    \"支持分页、搜索或过滤功能，提升文档查询的可用性和性能。\",\n    \"提供文档摘要或推荐理由，帮助用户快速判断文档相关性。\"\n  ]\n}\n```\nuser: \n请分析以下MCP工具测试结果:\n\n测试用例名称: 无效库名错误处理测试\n测试描述: 测试resolve-library-id在提供完全不存在的库名时的错误处理能力。\n调用工具: resolve-library-id\n输入参数: {\"libraryName\": \"nonexistent-library-123\"}\n期望结果类型: error\n期望结果内容: 明确提示没有找到匹配的库，并建议优化查询关键词。\n执行时间: 2.852秒\n\n实际响应:\n{\n  \"success\": true,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: Closure Library\\n- Context7-compatible library ID: /google/closure-library\\n- Description: Closure Library is a collection of JavaScript libraries that helps developers build complex, high-performance web applications. It has been archived and is no longer recommended for modern JavaScript development.\\n- Code Snippets: 1070\\n- Trust Score: 8.9\\n----------\\n- Title: Base122 Encoding Library\\n- Context7-compatible library ID: /kookyleo/base122\\n- Description: A high-performance, zero-dependency Rust library for Base122 encoding and decoding, offering superior space efficiency compared to Base64.\\n- Code Snippets: 24\\n- Trust Score: 5.2\\n----------\\n- Title: Crawlbase Java\\n- Context7-compatible library ID: /crawlbase/crawlbase-java\\n- Description: A Java library for scraping and crawling websites using the Crawlbase API, supporting GET, POST, and JavaScript requests.\\n- Code Snippets: 11\\n- Trust Score: 8.3\\n----------\\n- Title: Outscraper Node\\n- Context7-compatible library ID: /outscraper/outscraper-node\\n- Description: The library provides convenient access to the Outscraper API from applications written in server-side JavaScript. Allows using Outscraper's services from your code.\\n- Code Snippets: 37\\n- Trust Score: 7.2\\n----------\\n- Title: NocoBase\\n- Context7-compatible library ID: /nocobase/nocobase\\n- Description: NocoBase is an extensibility-first, open-source no-code development platform that allows for rapid deployment of scalable, private, and controllable no-code solutions.\\n- Code Snippets: 1024\\n- Trust Score: 7.6\\n----------\\n- Title: Supabase Copycat\\n- Context7-compatible library ID: /supabase-community/copycat\\n- Description: Copycat is a library that deterministically generates fake data by mapping input values to consistent output values, making it ideal for anonymizing sensitive information.\\n- Code Snippets: 71\\n- Trust Score: 8.8\\n----------\\n- Title: Crawlbase .NET\\n- Context7-compatible library ID: /crawlbase/crawlbase-net\\n- Description: A .NET library for scraping and crawling websites using the Crawlbase API, supporting GET and POST requests, JavaScript rendering, and storing results.\\n- Code Snippets: 15\\n- Trust Score: 8.3\\n----------\\n- Title: Nothing\\n- Context7-compatible library ID: /zhang-114/nothing\\n- Description: This repository appears to be a placeholder or an empty project, as indicated by the name 'nothing'.\\n- Code Snippets: 19\\n- Trust Score: 2\\n----------\\n- Title: GoCardless Pro Go\\n- Context7-compatible library ID: /gocardless/gocardless-pro-go\\n- Description: A Go client library that provides a simple wrapper around the GoCardless Pro API for managing payments and mandates.\\n- Code Snippets: 17\\n- Trust Score: 9.1\\n----------\\n- Title: NativeBase\\n- Context7-compatible library ID: /websites/docs_nativebase_io\\n- Description: NativeBase is a component library for React Native that enables developers to build universal design systems and applications for Android, iOS, and the Web. It provides accessible, highly themeable, and responsive components.\\n- Code Snippets: 999\\n- Trust Score: 7.5\\n----------\\n- Title: Cloudflare Go\\n- Context7-compatible library ID: /cloudflare/cloudflare-go\\n- Description: A Go library providing convenient access to the Cloudflare REST API, generated with Stainless, for applications written in Go.\\n- Code Snippets: 24\\n- Trust Score: 9.3\\n- Versions: v4.5.1\\n----------\\n- Title: Open Library RESTful API\\n- Context7-compatible library ID: /websites/openlibrary-dev\\n- Description: Open Library provides a RESTful API for accessing and querying its vast collection of books and author data in various formats like JSON and RDF. It allows programmatic access to library resources, including editions, works, and recent changes.\\n- Code Snippets: 5\\n- Trust Score: 7.5\\n----------\\n- Title: SimpleBase\\n- Context7-compatible library ID: /ssg/simplebase\\n- Description: SimpleBase is a .NET library providing implementations for various exotic base encodings like Base32, Base58, and Base85, with support for multiple flavors and features like Multibase compatibility and async APIs.\\n- Code Snippets: 171\\n- Trust Score: 9.5\\n----------\\n- Title: GoCardless Pro Ruby Client\\n- Context7-compatible library ID: /gocardless/gocardless-pro-ruby\\n- Description: A Ruby client library for interacting with the GoCardless API, providing methods for managing payments, mandates, and customers.\\n- Code Snippets: 13\\n- Trust Score: 9.1\\n----------\\n- Title: Membase JS\\n- Context7-compatible library ID: /unibaseio/membase-js\\n- Description: A JavaScript library for membase, include memory management, blockchain integration, knowledge and storage.\\n- Code Snippets: 15\\n- Trust Score: 5.6\\n----------\\n- Title: Gaubee Standard Library\\n- Context7-compatible library ID: /gaubee/std\\n- Description: Gaubee Standard Library is a collection of reusable packages for various functionalities, including utilities, flow control, and Node.js/Deno specific tools.\\n- Code Snippets: 125\\n- Trust Score: 8.4\\n----------\\n- Title: Supabase Swift\\n- Context7-compatible library ID: /supabase/supabase-swift\\n- Description: A Swift client library for interacting with Supabase, mirroring the design of supabase-js, enabling database operations, authentication, and real-time subscriptions.\\n- Code Snippets: 92\\n- Trust Score: 9.5\\n----------\\n- Title: Rschedule\\n- Context7-compatible library ID: /jorroll/rschedule\\n- Description: A date-agnostic, immutable, and extensible JavaScript library for working with recurring dates, supporting various date libraries and serialization formats like ICAL.\\n- Code Snippets: 90\\n- Trust Score: 8.1\\n----------\\n- Title: Supabase C#\\n- Context7-compatible library ID: /supabase-community/supabase-csharp\\n- Description: Supabase C# is a .NET client library that integrates with Supabase services, providing features for real-time data, authentication, storage, and serverless functions.\\n- Code Snippets: 3\\n- Trust Score: 8.8\\n----------\\n- Title: NativeBase\\n- Context7-compatible library ID: /geekyants/nativebase\\n- Description: NativeBase is a mobile-first, accessible component library for building consistent design systems across Android, iOS, and web, now evolving into gluestack-ui.\\n- Code Snippets: 12\\n- Trust Score: 8.7\\n----------\\n- Title: SAP Jenkins Library\\n- Context7-compatible library ID: /sap/jenkins-library\\n- Description: Jenkins shared library for Continuous Delivery pipelines.\\n- Code Snippets: 540\\n- Trust Score: 8.7\\n----------\\n- Title: Lib Recur\\n- Context7-compatible library ID: /dmfs/lib-recur\\n- Description: A Java library for parsing RFC 5545 recurrence strings, iterating instances, and building recurrence strings, with support for RSCALE and a flexible RecurrenceSet API.\\n- Code Snippets: 16\\n- Trust Score: 9.3\\n----------\\n- Title: ScrapingBee Node\\n- Context7-compatible library ID: /scrapingbee/scrapingbee-node\\n- Description: A Node library to interact with ScrapingBee's API for headless browsers and proxy rotation\\n- Code Snippets: 4\\n- Trust Score: 7.4\\n----------\\n- Title: Exceptionless\\n- Context7-compatible library ID: /exceptionless/exceptionless\\n- Description: Exceptionless application\\n- Code Snippets: 130\\n- Trust Score: 7.6\\n----------\\n- Title: Couchbase Node.js Client Library\\n- Context7-compatible library ID: /couchbase/couchnode\\n- Description: The Node.js SDK library allows you to connect to a Couchbase cluster from Node.js using the fast libcouchbase library and the Couchbase binary protocol.\\n- Code Snippets: 54\\n- Trust Score: 7\\n----------\\n- Title: PyTenable\\n- Context7-compatible library ID: /tenable/pytenable\\n- Description: Python Library for interfacing into Tenable's platform APIs\\n- Code Snippets: 32\\n- Trust Score: 9.3\\n----------\\n- Title: Supabase Error Translator JS\\n- Context7-compatible library ID: /srothgan/supabase-error-translator-js\\n- Description: A JavaScript library that translates Supabase error codes and messages into 9 different languages, enhancing user experience with localized error feedback.\\n- Code Snippets: 18\\n- Trust Score: 4.6\\n----------\\n- Title: Subsurface\\n- Context7-compatible library ID: /softwareunderground/subsurface\\n- Description: missing description\\n- Code Snippets: 50\\n- Trust Score: 8.1\\n----------\\n- Title: Gobble FM\\n- Context7-compatible library ID: /twoscott/gobble-fm\\n- Description: A Go (Golang) library for the Last.fm API\\n- Code Snippets: 4\\n- Trust Score: 6.5\\n----------\\n- Title: DeepL Node.js Library\\n- Context7-compatible library ID: /deeplcom/deepl-node\\n- Description: Official Node.js client library for the DeepL API, enabling applications to interact with DeepL's translation services for high-quality text and document translations.\\n- Code Snippets: 54\\n- Trust Score: 8\\n----------\\n- Title: Oops\\n- Context7-compatible library ID: /samber/oops\\n- Description: 🔥 Error handling library with context, assertion, stack trace and source fragments\\n- Code Snippets: 131\\n- Trust Score: 9.6\\n----------\\n- Title: Oslo Crypto\\n- Context7-compatible library ID: /oslo-project/crypto\\n- Description: A very basic, runtime-agnostic crypto library\\n- Code Snippets: 123\\n- Trust Score: 6.2\\n----------\\n- Title: Outscraper Java\\n- Context7-compatible library ID: /outscraper/outscraper-java\\n- Description: The library provides convenient access to the Outscraper API from applications written in the Java language. Allows using Outscraper's services from your code. \\n- Code Snippets: 90\\n- Trust Score: 7.2\\n----------\\n- Title: Ignore\\n- Context7-compatible library ID: /kaelzhang/node-ignore\\n- Description: A pure JavaScript implementation of the .gitignore spec for filtering and parsing ignore rules, used by various projects like ESLint and GitBook.\\n- Code Snippets: 20\\n- Trust Score: 9.7\\n----------\\n- Title: Repluggable\\n- Context7-compatible library ID: /wix-incubator/repluggable\\n- Description: Repluggable is a library for implementing inversion of control in front-end applications, simplifying the development of complex projects by composing functionality from pluggable packages.\\n- Code Snippets: 30\\n- Trust Score: 9.7\\n----------\\n- Title: Tenacity\\n- Context7-compatible library ID: /jd/tenacity\\n- Description: Retrying library for Python\\n- Code Snippets: 67\\n- Trust Score: 9.9\\n----------\\n- Title: FirebaseClient\\n- Context7-compatible library ID: /mobizt/firebaseclient\\n- Description: An asynchronous Firebase client library for Arduino that supports Firebase Realtime Database, Cloud Firestore, Cloud Messaging, Firebase Storage, and Google Cloud services, offering comprehensive features for serverless applications and IoT.\\n- Code Snippets: 549\\n- Trust Score: 9.2\"\n      }\n    ]\n  },\n  \"raw\": {\n    \"result\": {\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: Closure Library\\n- Context7-compatible library ID: /google/closure-library\\n- Description: Closure Library is a collection of JavaScript libraries that helps developers build complex, high-performance web applications. It has been archived and is no longer recommended for modern JavaScript development.\\n- Code Snippets: 1070\\n- Trust Score: 8.9\\n----------\\n- Title: Base122 Encoding Library\\n- Context7-compatible library ID: /kookyleo/base122\\n- Description: A high-performance, zero-dependency Rust library for Base122 encoding and decoding, offering superior space efficiency compared to Base64.\\n- Code Snippets: 24\\n- Trust Score: 5.2\\n----------\\n- Title: Crawlbase Java\\n- Context7-compatible library ID: /crawlbase/crawlbase-java\\n- Description: A Java library for scraping and crawling websites using the Crawlbase API, supporting GET, POST, and JavaScript requests.\\n- Code Snippets: 11\\n- Trust Score: 8.3\\n----------\\n- Title: Outscraper Node\\n- Context7-compatible library ID: /outscraper/outscraper-node\\n- Description: The library provides convenient access to the Outscraper API from applications written in server-side JavaScript. Allows using Outscraper's services from your code.\\n- Code Snippets: 37\\n- Trust Score: 7.2\\n----------\\n- Title: NocoBase\\n- Context7-compatible library ID: /nocobase/nocobase\\n- Description: NocoBase is an extensibility-first, open-source no-code development platform that allows for rapid deployment of scalable, private, and controllable no-code solutions.\\n- Code Snippets: 1024\\n- Trust Score: 7.6\\n----------\\n- Title: Supabase Copycat\\n- Context7-compatible library ID: /supabase-community/copycat\\n- Description: Copycat is a library that deterministically generates fake data by mapping input values to consistent output values, making it ideal for anonymizing sensitive information.\\n- Code Snippets: 71\\n- Trust Score: 8.8\\n----------\\n- Title: Crawlbase .NET\\n- Context7-compatible library ID: /crawlbase/crawlbase-net\\n- Description: A .NET library for scraping and crawling websites using the Crawlbase API, supporting GET and POST requests, JavaScript rendering, and storing results.\\n- Code Snippets: 15\\n- Trust Score: 8.3\\n----------\\n- Title: Nothing\\n- Context7-compatible library ID: /zhang-114/nothing\\n- Description: This repository appears to be a placeholder or an empty project, as indicated by the name 'nothing'.\\n- Code Snippets: 19\\n- Trust Score: 2\\n----------\\n- Title: GoCardless Pro Go\\n- Context7-compatible library ID: /gocardless/gocardless-pro-go\\n- Description: A Go client library that provides a simple wrapper around the GoCardless Pro API for managing payments and mandates.\\n- Code Snippets: 17\\n- Trust Score: 9.1\\n----------\\n- Title: NativeBase\\n- Context7-compatible library ID: /websites/docs_nativebase_io\\n- Description: NativeBase is a component library for React Native that enables developers to build universal design systems and applications for Android, iOS, and the Web. It provides accessible, highly themeable, and responsive components.\\n- Code Snippets: 999\\n- Trust Score: 7.5\\n----------\\n- Title: Cloudflare Go\\n- Context7-compatible library ID: /cloudflare/cloudflare-go\\n- Description: A Go library providing convenient access to the Cloudflare REST API, generated with Stainless, for applications written in Go.\\n- Code Snippets: 24\\n- Trust Score: 9.3\\n- Versions: v4.5.1\\n----------\\n- Title: Open Library RESTful API\\n- Context7-compatible library ID: /websites/openlibrary-dev\\n- Description: Open Library provides a RESTful API for accessing and querying its vast collection of books and author data in various formats like JSON and RDF. It allows programmatic access to library resources, including editions, works, and recent changes.\\n- Code Snippets: 5\\n- Trust Score: 7.5\\n----------\\n- Title: SimpleBase\\n- Context7-compatible library ID: /ssg/simplebase\\n- Description: SimpleBase is a .NET library providing implementations for various exotic base encodings like Base32, Base58, and Base85, with support for multiple flavors and features like Multibase compatibility and async APIs.\\n- Code Snippets: 171\\n- Trust Score: 9.5\\n----------\\n- Title: GoCardless Pro Ruby Client\\n- Context7-compatible library ID: /gocardless/gocardless-pro-ruby\\n- Description: A Ruby client library for interacting with the GoCardless API, providing methods for managing payments, mandates, and customers.\\n- Code Snippets: 13\\n- Trust Score: 9.1\\n----------\\n- Title: Membase JS\\n- Context7-compatible library ID: /unibaseio/membase-js\\n- Description: A JavaScript library for membase, include memory management, blockchain integration, knowledge and storage.\\n- Code Snippets: 15\\n- Trust Score: 5.6\\n----------\\n- Title: Gaubee Standard Library\\n- Context7-compatible library ID: /gaubee/std\\n- Description: Gaubee Standard Library is a collection of reusable packages for various functionalities, including utilities, flow control, and Node.js/Deno specific tools.\\n- Code Snippets: 125\\n- Trust Score: 8.4\\n----------\\n- Title: Supabase Swift\\n- Context7-compatible library ID: /supabase/supabase-swift\\n- Description: A Swift client library for interacting with Supabase, mirroring the design of supabase-js, enabling database operations, authentication, and real-time subscriptions.\\n- Code Snippets: 92\\n- Trust Score: 9.5\\n----------\\n- Title: Rschedule\\n- Context7-compatible library ID: /jorroll/rschedule\\n- Description: A date-agnostic, immutable, and extensible JavaScript library for working with recurring dates, supporting various date libraries and serialization formats like ICAL.\\n- Code Snippets: 90\\n- Trust Score: 8.1\\n----------\\n- Title: Supabase C#\\n- Context7-compatible library ID: /supabase-community/supabase-csharp\\n- Description: Supabase C# is a .NET client library that integrates with Supabase services, providing features for real-time data, authentication, storage, and serverless functions.\\n- Code Snippets: 3\\n- Trust Score: 8.8\\n----------\\n- Title: NativeBase\\n- Context7-compatible library ID: /geekyants/nativebase\\n- Description: NativeBase is a mobile-first, accessible component library for building consistent design systems across Android, iOS, and web, now evolving into gluestack-ui.\\n- Code Snippets: 12\\n- Trust Score: 8.7\\n----------\\n- Title: SAP Jenkins Library\\n- Context7-compatible library ID: /sap/jenkins-library\\n- Description: Jenkins shared library for Continuous Delivery pipelines.\\n- Code Snippets: 540\\n- Trust Score: 8.7\\n----------\\n- Title: Lib Recur\\n- Context7-compatible library ID: /dmfs/lib-recur\\n- Description: A Java library for parsing RFC 5545 recurrence strings, iterating instances, and building recurrence strings, with support for RSCALE and a flexible RecurrenceSet API.\\n- Code Snippets: 16\\n- Trust Score: 9.3\\n----------\\n- Title: ScrapingBee Node\\n- Context7-compatible library ID: /scrapingbee/scrapingbee-node\\n- Description: A Node library to interact with ScrapingBee's API for headless browsers and proxy rotation\\n- Code Snippets: 4\\n- Trust Score: 7.4\\n----------\\n- Title: Exceptionless\\n- Context7-compatible library ID: /exceptionless/exceptionless\\n- Description: Exceptionless application\\n- Code Snippets: 130\\n- Trust Score: 7.6\\n----------\\n- Title: Couchbase Node.js Client Library\\n- Context7-compatible library ID: /couchbase/couchnode\\n- Description: The Node.js SDK library allows you to connect to a Couchbase cluster from Node.js using the fast libcouchbase library and the Couchbase binary protocol.\\n- Code Snippets: 54\\n- Trust Score: 7\\n----------\\n- Title: PyTenable\\n- Context7-compatible library ID: /tenable/pytenable\\n- Description: Python Library for interfacing into Tenable's platform APIs\\n- Code Snippets: 32\\n- Trust Score: 9.3\\n----------\\n- Title: Supabase Error Translator JS\\n- Context7-compatible library ID: /srothgan/supabase-error-translator-js\\n- Description: A JavaScript library that translates Supabase error codes and messages into 9 different languages, enhancing user experience with localized error feedback.\\n- Code Snippets: 18\\n- Trust Score: 4.6\\n----------\\n- Title: Subsurface\\n- Context7-compatible library ID: /softwareunderground/subsurface\\n- Description: missing description\\n- Code Snippets: 50\\n- Trust Score: 8.1\\n----------\\n- Title: Gobble FM\\n- Context7-compatible library ID: /twoscott/gobble-fm\\n- Description: A Go (Golang) library for the Last.fm API\\n- Code Snippets: 4\\n- Trust Score: 6.5\\n----------\\n- Title: DeepL Node.js Library\\n- Context7-compatible library ID: /deeplcom/deepl-node\\n- Description: Official Node.js client library for the DeepL API, enabling applications to interact with DeepL's translation services for high-quality text and document translations.\\n- Code Snippets: 54\\n- Trust Score: 8\\n----------\\n- Title: Oops\\n- Context7-compatible library ID: /samber/oops\\n- Description: 🔥 Error handling library with context, assertion, stack trace and source fragments\\n- Code Snippets: 131\\n- Trust Score: 9.6\\n----------\\n- Title: Oslo Crypto\\n- Context7-compatible library ID: /oslo-project/crypto\\n- Description: A very basic, runtime-agnostic crypto library\\n- Code Snippets: 123\\n- Trust Score: 6.2\\n----------\\n- Title: Outscraper Java\\n- Context7-compatible library ID: /outscraper/outscraper-java\\n- Description: The library provides convenient access to the Outscraper API from applications written in the Java language. Allows using Outscraper's services from your code. \\n- Code Snippets: 90\\n- Trust Score: 7.2\\n----------\\n- Title: Ignore\\n- Context7-compatible library ID: /kaelzhang/node-ignore\\n- Description: A pure JavaScript implementation of the .gitignore spec for filtering and parsing ignore rules, used by various projects like ESLint and GitBook.\\n- Code Snippets: 20\\n- Trust Score: 9.7\\n----------\\n- Title: Repluggable\\n- Context7-compatible library ID: /wix-incubator/repluggable\\n- Description: Repluggable is a library for implementing inversion of control in front-end applications, simplifying the development of complex projects by composing functionality from pluggable packages.\\n- Code Snippets: 30\\n- Trust Score: 9.7\\n----------\\n- Title: Tenacity\\n- Context7-compatible library ID: /jd/tenacity\\n- Description: Retrying library for Python\\n- Code Snippets: 67\\n- Trust Score: 9.9\\n----------\\n- Title: FirebaseClient\\n- Context7-compatible library ID: /mobizt/firebaseclient\\n- Description: An asynchronous Firebase client library for Arduino that supports Firebase Realtime Database, Cloud Firestore, Cloud Messaging, Firebase Storage, and Google Cloud services, offering comprehensive features for serverless applications and IoT.\\n- Code Snippets: 549\\n- Trust Score: 9.2\"\n        }\n      ]\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1065777\n  }\n}\n\n请分析这个测试是否通过，并提供详细分析。\n\nmcp_test_validator: ```json\n{\n  \"status\": \"fail\",\n  \"confidence\": 0.95,\n  \"analysis\": \"测试未通过。测试用例期望在输入一个不存在的库名（'nonexistent-library-123'）时，工具返回类型为 'error' 的响应，并明确提示没有找到匹配的库以及建议优化查询关键词。然而，实际响应中工具返回了 'success': true，并列出了一系列库信息，尽管这些库与输入的库名无关。这表明工具未能正确识别无效输入并返回预期的错误信息，违反了测试期望。\",\n  \"issues\": [\n    \"工具未正确识别无效库名，返回了 'success' 状态而非 'error'。\",\n    \"响应中返回了与查询无关的库列表，可能误导用户认为这些是匹配结果。\",\n    \"未提供明确的错误提示信息，如建议优化查询关键词。\",\n    \"响应内容缺乏对无效输入的处理逻辑，影响用户体验和系统可靠性。\"\n  ],\n  \"recommendations\": [\n    \"改进 resolve-library-id 工具的输入验证逻辑，确保在未找到匹配库时返回 'error' 类型。\",\n    \"在错误响应中提供清晰的提示信息，如 '未找到匹配的库，请尝试优化查询关键词。'\",\n    \"增加模糊匹配阈值或过滤机制，避免在完全不相关的情况下返回结果。\",\n    \"在测试中增加边界情况的验证，如空字符串、特殊字符、完全不存在的库名等。\",\n    \"优化响应结构，区分成功与错误类型，提升用户对查询结果的理解和信任度。\"\n  ]\n}\n```\nuser: \n请分析以下MCP工具测试结果:\n\n测试用例名称: 直接提供库ID的文档获取测试\n测试描述: 验证用户直接提供格式为'/org/project'的库ID时，get-library-docs能否直接使用该ID获取文档。\n调用工具: get-library-docs\n输入参数: {\"context7CompatibleLibraryID\": \"/vercel/next.js\", \"topic\": \"routing\", \"tokens\": 8000}\n期望结果类型: success\n期望结果内容: 返回Next.js路由相关功能的最新文档内容。\n执行时间: 3.037秒\n\n实际响应:\n{\n  \"success\": true,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"========================\\nCODE SNIPPETS\\n========================\\nTITLE: Next.js Pages Router Dynamic Routing Conventions\\nDESCRIPTION: Details the file and folder naming conventions for creating dynamic routes, catch-all routes, and optional catch-all routes in the Next.js Pages Router, allowing flexible URL patterns.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_8\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nPages Router Dynamic Routing Conventions:\\n\\nFolder Convention:\\n  [folder]/index.js / [folder]/index.jsx / [folder]/index.tsx\\n    - Route: /[param]\\n    - Description: Dynamic route segment (e.g., /users/[id]).\\n\\n  [...folder]/index.js / [...folder]/index.jsx / [...folder]/index.tsx\\n    - Route: /[...params]\\n    - Description: Catch-all route segment (e.g., /docs/a/b/c).\\n\\n  [[...folder]]/index.js / [[...folder]]/index.jsx / [[...folder]]/index.tsx\\n    - Route: /[[...params]]\\n    - Description: Optional catch-all route segment (e.g., /blog or /blog/a/b).\\n\\nFile Convention:\\n  [file].js / [file].jsx / [file].tsx\\n    - Route: /[param]\\n    - Description: Dynamic route segment (e.g., /users/[id]).\\n\\n  [...file].js / [...file].jsx / [...file].tsx\\n    - Route: /[...params]\\n    - Description: Catch-all route segment (e.g., /docs/a/b/c).\\n\\n  [[...file]].js / [[...file]].jsx / [[...file]].tsx\\n    - Route: /[[...params]]\\n    - Description: Optional catch-all route segment (e.g., /blog or /blog/a/b).\\n```\\n\\n----------------------------------------\\n\\nTITLE: Handling Dynamic Route Segments in Next.js Route Handlers\\nDESCRIPTION: This snippet illustrates how to capture dynamic route segments in a Next.js Route Handler. The `params` object, passed as an argument to the `GET` function, contains the values of the dynamic segments (e.g., `slug`), allowing the handler to respond based on the URL path.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_12\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nexport async function GET(\\n  request: Request,\\n  { params }: { params: Promise<{ slug: string }> }\\n) {\\n  const { slug } = await params // 'a', 'b', or 'c'\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport async function GET(request, { params }) {\\n  const { slug } = await params // 'a', 'b', or 'c'\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Creating Dynamic Next.js API Routes\\nDESCRIPTION: Details the implementation of dynamic API routes in Next.js, which follow the same file naming conventions as dynamic pages. This allows API routes to capture variable segments from the URL. The example demonstrates accessing dynamic parameters via `req.query`.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_15\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  const { pid } = req.query\\n  res.end(`Post: ${pid}`)\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  const { pid } = req.query\\n  res.end(`Post: ${pid}`)\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Optional Catch-all API Route Query Object Variations\\nDESCRIPTION: This snippet illustrates the `req.query` object's structure for Next.js optional catch-all API routes (`[[...slug]]`). It shows how the `slug` parameter is an empty object when the base route is accessed, and an array when path segments are present, similar to regular catch-all routes.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_17\\n\\nLANGUAGE: JSON\\nCODE:\\n```\\n{\\n} // GET `/api/post` (empty object)\\n{\\n  \\\"slug\\\": [\\\"a\\\"]\\n} // `GET /api/post/a` (single-element array)\\n{\\n  \\\"slug\\\": [\\\"a\\\", \\\"b\\\"]\\n} // `GET /api/post/a/b` (multi-element array)\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implement Next.js Catch-all API Route Handler\\nDESCRIPTION: This snippet demonstrates how to create a catch-all API route in Next.js using `[...slug].ts` or `[...slug].js`. It shows how the `slug` parameter from the URL is accessed via `req.query` as an array, allowing the route to match multiple path segments. The handler then responds by joining the slug segments.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_16\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  const { slug } = req.query\\n  res.end(`Post: ${slug.join(', ')}`)\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  const { slug } = req.query\\n  res.end(`Post: ${slug.join(', ')}`)\\n}\\n```\\n\\nLANGUAGE: JSON\\nCODE:\\n```\\n{\\n  \\\"slug\\\": [\\\"a\\\"]\\n}\\n\\n{\\n  \\\"slug\\\": [\\\"a\\\", \\\"b\\\"]\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Parallel and Intercepted Route Conventions\\nDESCRIPTION: Details advanced routing patterns in Next.js, including named slots for parallel routes and conventions for intercepting routes at different levels of the file system hierarchy.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_5\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nNext.js Parallel and Intercepted Route Conventions:\\n\\n- Parallel Routes:\\n  - @folder: Named Slot. Defines a named slot for parallel routes, allowing multiple routes to be rendered simultaneously in the same layout.\\n\\n- Intercepting Routes:\\n  - (.)folder: Intercepts a route at the same level. Used to show a route from a different part of the app within the current layout.\\n  - (..)folder: Intercepts a route one level above. Navigates up one directory to intercept a route.\\n  - (..)(..)folder: Intercepts a route two levels above. Navigates up two directories to intercept a route.\\n  - (...)folder: Intercepts a route from the root. Navigates to the root of the application to intercept a route.\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configuring Route Segment Options for Next.js Route Handler (JavaScript)\\nDESCRIPTION: This snippet illustrates how to apply route segment configuration options to a Next.js Route Handler. It exports constants like `dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, and `preferredRegion` to control caching behavior, data fetching, and deployment environment for the specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_25\\n\\nLANGUAGE: js\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configuring Route Segment Options for Next.js Route Handler (TypeScript)\\nDESCRIPTION: This snippet illustrates how to apply route segment configuration options to a Next.js Route Handler. It exports constants like `dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, and `preferredRegion` to control caching behavior, data fetching, and deployment environment for the specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_24\\n\\nLANGUAGE: ts\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\n----------------------------------------\\n\\nTITLE: Handle HTTP Methods in Next.js API Routes\\nDESCRIPTION: Illustrates how to process different HTTP methods (e.g., POST) within a Next.js API route using `req.method`. This allows for distinct logic based on the incoming request type, enabling a single API route file to handle multiple HTTP verbs.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_2\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  if (req.method === 'POST') {\\n    // Process a POST request\\n  } else {\\n    // Handle any other HTTP method\\n  }\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  if (req.method === 'POST') {\\n    // Process a POST request\\n  } else {\\n    // Handle any other HTTP method\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Handle dynamic route segments in Next.js Route Handlers\\nDESCRIPTION: Demonstrates how to extract dynamic parameters from the URL using the `params` object in a Next.js Route Handler. The `slug` parameter is accessed from the `params` object, which is a Promise that resolves to an object containing the dynamic segments.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_13\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport async function GET(request, { params }) {\\n  const { slug } = await params // 'a', 'b', or 'c'\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Access Dynamic Route Parameters via Context Object\\nDESCRIPTION: Demonstrates how to retrieve dynamic route parameters from the `context` object passed to a route handler. The `params` property within `context` is a promise that resolves to an object containing the dynamic segments of the URL.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_3\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET(\\n  request: Request,\\n  { params }: { params: Promise<{ team: string }> }\\n) {\\n  const { team } = await params\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET(request, { params }) {\\n  const { team } = await params\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Statically Generate Next.js Routes with `generateStaticParams`\\nDESCRIPTION: This example demonstrates how to use the `generateStaticParams` function to pre-render dynamic routes at build time. It fetches data (e.g., posts) and returns an array of objects, each defining the parameters required for a specific static route. This approach optimizes build performance by automatically deduplicating `fetch` requests across different parts of the application.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_3\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nexport async function generateStaticParams() {\\n  const posts = await fetch('https://.../posts').then((res) => res.json())\\n\\n  return posts.map((post) => ({\\n    slug: post.slug,\\n  }))\\n}\\n```\\n\\nLANGUAGE: JSX\\nCODE:\\n```\\nexport async function generateStaticParams() {\\n  const posts = await fetch('https://.../posts').then((res) => res.json())\\n\\n  return posts.map((post) => ({\\n    slug: post.slug,\\n  }))\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Dynamic Route Parameter Mapping Conventions\\nDESCRIPTION: This section illustrates how different Next.js dynamic routing conventions map to the `router.query` object. It covers single dynamic segments, catch-all segments, and optional catch-all segments, showing the structure of the `params` object for various URL patterns and their corresponding file system conventions.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/02-dynamic-routes.mdx#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nDynamic Segment: [segmentName]\\n  - Convention: Wrapping a file or folder name in square brackets (e.g., `pages/blog/[slug].js`).\\n  - Description: Matches a single segment in the URL.\\n  - `router.query` mapping examples:\\n    - Route: `pages/blog/[slug].js`\\n    - URL: `/blog/a`   -> `router.query`: `{ slug: 'a' }`\\n    - URL: `/blog/b`   -> `router.query`: `{ slug: 'b' }`\\n    - URL: `/blog/c`   -> `router.query`: `{ slug: 'c' }`\\n\\nCatch-all Segment: [...segmentName]\\n  - Convention: Adding an ellipsis inside the brackets (e.g., `pages/shop/[...slug].js`).\\n  - Description: Matches all subsequent segments in the URL and collects them into an array.\\n  - `router.query` mapping examples:\\n    - Route: `pages/shop/[...slug].js`\\n    - URL: `/shop/a`       -> `router.query`: `{ slug: ['a'] }`\\n    - URL: `/shop/a/b`     -> `router.query`: `{ slug: ['a', 'b'] }`\\n    - URL: `/shop/a/b/c`   -> `router.query`: `{ slug: ['a', 'b', 'c'] }`\\n\\nOptional Catch-all Segment: [[...segmentName]]\\n  - Convention: Including the parameter in double square brackets (e.g., `pages/shop/[[...slug]].js`).\\n  - Description: Matches all subsequent segments (like catch-all) but also matches the base path without any dynamic segments. The parameter will be `undefined` if no segments are present.\\n  - `router.query` mapping examples:\\n    - Route: `pages/shop/[[...slug]].js`\\n    - URL: `/shop`         -> `router.query`: `{ slug: undefined }`\\n    - URL: `/shop/a`       -> `router.query`: `{ slug: ['a'] }`\\n    - URL: `/shop/a/b`     -> `router.query`: `{ slug: ['a', 'b'] }`\\n    - URL: `/shop/a/b/c`   -> `router.query`: `{ slug: ['a', 'b', 'c'] }`\\n```\\n\\n----------------------------------------\\n\\nTITLE: Access Dynamic Route Params in Server Layouts\\nDESCRIPTION: Demonstrates how to retrieve dynamic route segments (`params`) in an `async` server component layout. The `params` prop is now a Promise in Next.js 15+, which needs to be awaited to extract the route parameters, allowing content to be displayed based on the URL.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_15\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nexport default async function DashboardLayout({\\n  children,\\n  params,\\n}: {\\n  children: React.ReactNode\\n  params: Promise<{ team: string }>\\n}) {\\n  const { team } = await params\\n\\n  return (\\n    <section>\\n      <header>\\n        <h1>Welcome to {team}'s Dashboard</h1>\\n      </header>\\n      <main>{children}</main>\\n    </section>\\n  )\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nexport default async function DashboardLayout({ children, params }) {\\n  const { team } = await params\\n\\n  return (\\n    <section>\\n      <header>\\n        <h1>Welcome to {team}'s Dashboard</h1>\\n      </header>\\n      <main>{children}</main>\\n    </section>\\n  )\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Route `params` Type Definitions\\nDESCRIPTION: This table outlines the TypeScript type definitions for the `params` object based on different Next.js route segment configurations. It shows how dynamic segments, catch-all segments, and optional catch-all segments influence the expected type of the `slug` or other parameter properties, providing a clear guide for type-safe route handling.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_2\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nRoute: app/blog/[slug]/page.js\\nparams Type Definition: { slug: string }\\n\\nRoute: app/shop/[...slug]/page.js\\nparams Type Definition: { slug: string[] }\\n\\nRoute: app/shop/[[...slug]]/page.js\\nparams Type Definition: { slug?: string[] }\\n\\nRoute: app/[categoryId]/[itemId]/page.js\\nparams Type Definition: { categoryId: string, itemId: string }\\n```\\n\\n----------------------------------------\\n\\nTITLE: Enable External Resolver for API Route\\nDESCRIPTION: This snippet sets the `externalResolver` flag to `true`, indicating that the API route is handled by an external resolver like Express or Connect. Enabling this option suppresses warnings for unresolved requests.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_7\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport const config = {\\n  api: {\\n    externalResolver: true\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Caching a GET Route Handler in JavaScript\\nDESCRIPTION: This example shows how to enable caching for a GET Route Handler by setting `export const dynamic = 'force-static'`. The handler fetches data from an external API and returns it as JSON, demonstrating how to make a static data fetch within a cached route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_3\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport const dynamic = 'force-static'\\n\\nexport async function GET() {\\n  const res = await fetch('https://data.mongodb-api.com/...', {\\n    headers: {\\n      'Content-Type': 'application/json',\\n      'API-Key': process.env.DATA_API_KEY,\\n    },\\n  })\\n  const data = await res.json()\\n\\n  return Response.json({ data })\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create a basic Next.js API Route\\nDESCRIPTION: Demonstrates how to create a simple API route in Next.js that returns a JSON response. Files inside `pages/api` are treated as API endpoints. This example shows both TypeScript and JavaScript implementations.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_0\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\ntype ResponseData = {\\n  message: string\\n}\\n\\nexport default function handler(\\n  req: NextApiRequest,\\n  res: NextApiResponse<ResponseData>\\n) {\\n  res.status(200).json({ message: 'Hello from Next.js!' })\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  res.status(200).json({ message: 'Hello from Next.js!' })\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configure Route Segment Options in Next.js Route Handler\\nDESCRIPTION: Demonstrates how to set various route segment configuration options within a Next.js Route Handler file. These options control behavior like dynamic routing, revalidation, caching, runtime environment, and preferred region. This allows fine-grained control over the handler's deployment and data fetching strategy.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_22\\n\\nLANGUAGE: ts\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\nLANGUAGE: js\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\n----------------------------------------\\n\\nTITLE: Bootstrap Next.js i18n Routing Example Project\\nDESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the internationalized routing example. You can choose your preferred package manager: npm, Yarn, or pnpm.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_0\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nnpx create-next-app --example i18n-routing i18n-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nyarn create next-app --example i18n-routing i18n-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\npnpm create next-app --example i18n-routing i18n-routing-app\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js API Route Handler Parameters\\nDESCRIPTION: Defines the signature and types for the `handler` function in Next.js API Routes, detailing the `req` (request) and `res` (response) objects available, which are instances of Node.js `http.IncomingMessage` and `http.ServerResponse` respectively.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  // ...\\n}\\n\\n- req: An instance of [http.IncomingMessage](https://nodejs.org/api/http.html#class-httpincomingmessage)\\n- res: An instance of [http.ServerResponse](https://nodejs.org/api/http.html#class-httpserverresponse)\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditionally Render Routes Based on User Role\\nDESCRIPTION: This example illustrates how to use Parallel Routes to conditionally render different layouts or components based on specific conditions, such as a user's role. The `checkUserRole` function determines the role, and the layout renders either the `admin` or `user` content accordingly, providing a flexible way to manage access.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_2\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nimport { checkUserRole } from '@/lib/auth'\\n\\nexport default function Layout({\\n  user,\\n  admin,\\n}: {\\n  user: React.ReactNode\\n  admin: React.ReactNode\\n}) {\\n  const role = checkUserRole()\\n  return role === 'admin' ? admin : user\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nimport { checkUserRole } from '@/lib/auth'\\n\\nexport default function Layout({ user, admin }) {\\n  const role = checkUserRole()\\n  return role === 'admin' ? admin : user\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js App Router: Routing and Rendering Best Practices\\nDESCRIPTION: Covers key concepts and best practices for routing and rendering in the Next.js App Router, including layouts, navigation, error handling, and Server/Client Components.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_0\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nLayouts:\\n  Purpose: Share UI across pages and enable partial rendering on navigation.\\n  Reference: /docs/app/api-reference/file-conventions/layout\\n\\n<Link> component:\\n  Purpose: Client-side navigation and prefetching.\\n  Reference: /docs/app/api-reference/components/link\\n\\nError Handling:\\n  Purpose: Gracefully handle catch-all errors and 404 errors in production by creating custom error pages.\\n  References: /docs/app/getting-started/error-handling, /docs/app/api-reference/file-conventions/not-found\\n\\nClient and Server Components:\\n  Purpose: Follow recommended composition patterns and check placement of \\\"use client\\\" boundaries to avoid unnecessarily increasing client-side JavaScript bundle.\\n  Reference: /docs/app/getting-started/server-and-client-components#examples\\n\\nDynamic APIs (e.g., cookies, searchParams):\\n  Purpose: Be aware that usage will opt the entire route into Dynamic Rendering (or whole application if used in Root Layout). Ensure intentional usage and wrap in <Suspense> boundaries where appropriate.\\n  References: /docs/app/api-reference/functions/cookies, /docs/app/api-reference/file-conventions/page#searchparams-optional, /docs/app/getting-started/partial-prerendering#dynamic-rendering\\n\\nPartial Prerendering (experimental):\\n  Purpose: Allows parts of a route to be dynamic without opting the whole route into dynamic rendering.\\n  Reference: /blog/next-14#partial-prerendering-preview\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Intercepting Routes File Conventions\\nDESCRIPTION: Defines the special file naming conventions used in Next.js to create intercepting routes. These conventions allow developers to specify how route segments should be matched relative to the current location, enabling features like displaying content in a modal without changing the URL. This mechanism is based on route segments, not the file-system.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/intercepting-routes.mdx#_snippet_0\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nIntercepting Routes Conventions:\\n\\n- (.) : Match segments on the same level\\n- (..) : Match segments one level above\\n- (..)(..) : Match segments two levels above\\n- (...) : Match segments from the root `app` directory\\n\\nExample Usage:\\nTo intercept the `photo` segment from within the `feed` segment, create a `(..)photo` directory structure. This means the `photo` route is one segment level higher, even if it's two file-system levels higher due to Parallel Routes slots (e.g., `@modal`).\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implementing Redirects in Next.js API Routes\\nDESCRIPTION: Explains how to perform client-side redirects from Next.js API routes to a specified path or URL. This is useful for post-submission actions, such as redirecting after a successful form submission. The example uses `res.redirect()` with a status code.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_13\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default async function handler(\\n  req: NextApiRequest,\\n  res: NextApiResponse\\n) {\\n  const { name, message } = req.body\\n\\n  try {\\n    await handleFormInputAsync({ name, message })\\n    res.redirect(307, '/')\\n  } catch (err) {\\n    res.status(500).send({ error: 'Failed to fetch data' })\\n  }\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default async function handler(req, res) {\\n  const { name, message } = req.body\\n\\n  try {\\n    await handleFormInputAsync({ name, message })\\n    res.redirect(307, '/')\\n  } catch (err) {\\n    res.status(500).send({ error: 'failed to fetch data' })\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Shallow Routing Limitation: Cross-Page Navigation\\nDESCRIPTION: This example highlights a key limitation of shallow routing: it only applies to URL changes within the *current* page. Attempting to use `router.push` with `shallow: true` to navigate to a different page (e.g., `/about`) will still result in a full page unload and reload, bypassing the shallow routing mechanism. This behavior ensures proper page loading for new routes.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_6\\n\\nLANGUAGE: js\\nCODE:\\n```\\nrouter.push('/?counter=10', '/about?counter=10', { shallow: true })\\n```\\n\\n----------------------------------------\\n\\nTITLE: Sending HTTP Responses in Next.js API Routes\\nDESCRIPTION: Illustrates sending generic HTTP responses from Next.js API routes, similar to JSON responses but allowing string, object, or Buffer bodies. It covers setting status codes and implementing error handling. This method provides flexibility for various response types.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_12\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default async function handler(\\n  req: NextApiRequest,\\n  res: NextApiResponse\\n) {\\n  try {\\n    const result = await someAsyncOperation()\\n    res.status(200).send({ result })\\n  } catch (err) {\\n    res.status(500).send({ error: 'failed to fetch data' })\\n  }\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default async function handler(req, res) {\\n  try {\\n    const result = await someAsyncOperation()\\n    res.status(200).send({ result })\\n  } catch (err) {\\n    res.status(500).send({ error: 'failed to fetch data' })\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Define GET Route Handlers in Next.js App Router\\nDESCRIPTION: This example shows how to create custom request handlers, known as Route Handlers, in the Next.js `app` directory. Route Handlers replace API Routes from the `pages` directory and leverage Web Request and Response APIs to handle incoming HTTP requests for a given route. This snippet specifically demonstrates a GET handler.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_33\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET(request: Request) {}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implement Basic GET Route Handler\\nDESCRIPTION: Demonstrates how to create a simple GET route handler that returns a JSON response. This example uses the Web Response API to send 'Hello World' as JSON.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_0\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET() {\\n  return Response.json({ message: 'Hello World' })\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET() {\\n  return Response.json({ message: 'Hello World' })\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Initialize Next.js Pages Route Module\\nDESCRIPTION: This JavaScript snippet initializes a `PagesRouteModule` instance, a fundamental component for server-side routing in Next.js. It imports various internal modules like `PagesRouteModule`, `RouteKind`, `App`, `Document`, and userland code. The module is configured with route definition details and then exported, enabling Next.js to handle page-based routing within the Turbopack environment.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_18\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 0\\n};\\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 2\\n};\\nimport { RouteKind } from '../../server/future/route-kind';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 8\\n};\\nimport App from 'VAR_MODULE_APP';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 6\\n};\\nimport Document from 'VAR_MODULE_DOCUMENT';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 10\\n};\\nimport * as userland from 'VAR_USERLAND';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 22\\n};\\nconst routeModule = new PagesRouteModule({\\n    definition: {\\n        kind: RouteKind.PAGES,\\n        page: 'VAR_DEFINITION_PAGE',\\n        pathname: 'VAR_DEFINITION_PATHNAME',\\n        bundlePath: '',\\n        filename: ''\\n    },\\n    components: {\\n        App,\\n        Document\\n    },\\n    userland\\n});\\nexport { routeModule };\\nexport { routeModule as l } from \\\"__TURBOPACK_VAR__\\\" assert {\\n    __turbopack_var__: true\\n};\\nexport { };\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js App Router: Create Dynamic Blog Post Page\\nDESCRIPTION: This snippet illustrates how to create a dynamic route for individual blog posts in Next.js. By wrapping the folder name in square brackets (`[slug]`), it allows the route to generate multiple pages based on data. The `generateStaticParams` function is typically used for static generation of these dynamic routes.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_3\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nfunction generateStaticParams() {}\\n\\nexport default function Page() {\\n  return <h1>Hello, Blog Post Page!</h1>\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nfunction generateStaticParams() {}\\n\\nexport default function Page() {\\n  return <h1>Hello, Blog Post Page!</h1>\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Pages Router: Routing and Rendering Best Practices\\nDESCRIPTION: Covers key concepts and best practices for routing and rendering in the Next.js Pages Router, including navigation and custom error pages.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\n<Link> component:\\n  Purpose: Client-side navigation and prefetching.\\n  Reference: /docs/pages/building-your-application/routing/linking-and-navigating\\n\\nCustom Errors:\\n  Purpose: Gracefully handle 500 and 404 errors by creating custom error pages.\\n  References: /docs/pages/building-your-application/routing/custom-error#500-page, /docs/pages/building-your-application/routing/custom-error#404-page\\n```\\n\\n----------------------------------------\\n\\nTITLE: Route Handler Conflict with Page in TypeScript\\nDESCRIPTION: This snippet illustrates a conflict scenario where a `route.ts` file and a `page.ts` file exist at the same route segment level. Next.js does not allow this configuration, as each `route.js` or `page.js` file takes over all HTTP verbs for that specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_4\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.ts`\\nexport async function POST(request: Request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Performing Server-Side Redirects in Next.js Route Handlers\\nDESCRIPTION: This example demonstrates how to perform a server-side redirect within a Next.js Route Handler using the `redirect` function from `next/navigation`. When this handler is accessed, it will redirect the client to the specified URL.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_11\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport { redirect } from 'next/navigation'\\n\\nexport async function GET(request: Request) {\\n  redirect('https://nextjs.org/')\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nimport { redirect } from 'next/navigation'\\n\\nexport async function GET(request) {\\n  redirect('https://nextjs.org/')\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Route Resolution Conflict Example\\nDESCRIPTION: Demonstrates a conflict scenario where a `route.js` (or `route.ts`) file cannot coexist at the same path as a `page.js` (or `page.ts`) file in Next.js, as both attempt to handle HTTP verbs for the route. This highlights the mutual exclusivity of these routing primitives at the same level.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_3\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.ts`\\nexport async function POST(request: Request) {}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.js`\\nexport async function POST(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implement Next.js Middleware for Dynamic Multi-Zone Routing\\nDESCRIPTION: This example illustrates how to use Next.js middleware (`middleware.js`) for dynamic routing decisions in a multi-zone environment. It's particularly useful when `rewrites` are insufficient, such as when routing depends on a feature flag or during a migration, allowing for conditional path rewriting based on runtime logic.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_3\\n\\nLANGUAGE: js\\nCODE:\\n```\\nexport async function middleware(request) {\\n  const { pathname, search } = req.nextUrl;\\n  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {\\n    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Route Handler Conflict with Page in JavaScript\\nDESCRIPTION: This snippet illustrates a conflict scenario where a `route.js` file and a `page.js` file exist at the same route segment level. Next.js does not allow this configuration, as each `route.js` or `page.js` file takes over all HTTP verbs for that specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_5\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.js`\\nexport async function POST(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configure Next.js Rewrites for Multi-Zone Routing\\nDESCRIPTION: This snippet demonstrates how to use the `rewrites` configuration in `next.config.js` to route requests to different zones in a Next.js multi-zone setup. It includes examples for routing specific paths and static assets, emphasizing that the `destination` should be a full URL pointing to the zone's production domain or a local development server.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_2\\n\\nLANGUAGE: js\\nCODE:\\n```\\nasync rewrites() {\\n    return [\\n        {\\n            source: '/blog',\\n            destination: `${process.env.BLOG_DOMAIN}/blog`,\\n        },\\n        {\\n            source: '/blog/:path+',\\n            destination: `${process.env.BLOG_DOMAIN}/blog/:path+`,\\n        },\\n        {\\n            source: '/blog-static/:path+',\\n            destination: `${process.env.BLOG_DOMAIN}/blog-static/:path+`,\\n        }\\n    ];\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Route Handlers API Reference\\nDESCRIPTION: Comprehensive reference for Next.js Route Handlers, including file conventions, supported HTTP methods, extended Request/Response APIs, and caching options. This section details how to structure Route Handlers and leverage Next.js-specific features.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_2\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nNext.js Route Handlers:\\n  File Convention: `route.js|ts`\\n    - Purpose: Defines a custom request handler for a given route.\\n    - Location: Must be inside the `app` directory.\\n    - Constraint: Cannot be at the same route segment level as `page.js`.\\n  Supported HTTP Methods:\\n    - Methods: `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, `OPTIONS`\\n    - Behavior: If an unsupported method is called, Next.js returns `405 Method Not Allowed`.\\n  Request/Response APIs:\\n    - Native: Web `Request`, `Response` (standard browser APIs).\\n    - Extended: `NextRequest`, `NextResponse` (Next.js specific helpers for advanced use cases).\\n  Caching for GET Methods:\\n    - Default: Not cached.\\n    - Opt-in: `export const dynamic = 'force-static'`\\n      - Purpose: Forces static rendering and caching of the `GET` response.\\n      - Limitation: Only applies to `GET` methods; other HTTP methods in the same file are not cached.\\n  Special Route Handlers:\\n    - Examples: `sitemap.ts`, `opengraph-image.tsx`, `icon.tsx`, and other metadata files.\\n    - Behavior: Remain static by default unless they use Dynamic APIs or dynamic config options.\\n```\\n\\n----------------------------------------\\n\\nTITLE: Define Route Handlers (App Router)\\nDESCRIPTION: This example shows how to define Route Handlers in the Next.js `app` directory, which replace traditional API Routes. Route Handlers allow you to create custom request handlers for specific HTTP methods (e.g., GET, POST) using Web Request and Response APIs.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_30\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET(request: Request) {}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Define Next.js Pages Route Module with Turbopack\\nDESCRIPTION: This JavaScript snippet defines a `PagesRouteModule` for a Next.js application, integrating `App`, `Document`, and userland components. It specifies the route definition including kind, page, and pathname, demonstrating how Next.js routes are configured within a Turbopack build environment. This module is crucial for handling page-based routing in Next.js.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_59\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 0\\n};\\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 2\\n};\\nimport { RouteKind } from '../../server/future/route-kind';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 8\\n};\\nimport App from 'VAR_MODULE_APP';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 6\\n};\\nimport Document from 'VAR_MODULE_DOCUMENT';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 10\\n};\\nimport * as userland from 'VAR_USERLAND';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 22\\n};\\nconst routeModule = new PagesRouteModule({\\n    definition: {\\n        kind: RouteKind.PAGES,\\n        page: 'VAR_DEFINITION_PAGE',\\n        pathname: 'VAR_DEFINITION_PATHNAME',\\n        bundlePath: '',\\n        filename: ''\\n    },\\n    components: {\\n        App,\\n        Document\\n    },\\n    userland\\n});\\nexport { routeModule };\\nexport { routeModule as l } from \\\"__TURBOPACK_VAR__\\\" assert {\\n    __turbopack_var__: true\\n};\\nexport { };\\n```\\n\\n----------------------------------------\\n\\nTITLE: Bootstrap Next.js i18n Routing Example App\\nDESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the internationalized routing example. Users can choose their preferred package manager: npm (via npx), Yarn, or pnpm, to quickly set up the project.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_0\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nnpx create-next-app --example i18n-routing-pages i18n-routing-pages-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nyarn create next-app --example i18n-routing-pages i18n-routing-pages-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\npnpm create next-app --example i18n-routing-pages i18n-routing-pages-app\\n```\\n\\n----------------------------------------\\n\\nTITLE: Read Active Route Segment with useSelectedLayoutSegment\\nDESCRIPTION: This snippet demonstrates how to use `useSelectedLayoutSegment` from `next/navigation` to read the active route segment within a parallel route slot. It accepts an optional `parallelRoutesKey` parameter to specify the slot. For example, `loginSegment` will be 'login' when navigating to `app/@auth/login`.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_1\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\n'use client'\\n\\nimport { useSelectedLayoutSegment } from 'next/navigation'\\n\\nexport default function Layout({ auth }: { auth: React.ReactNode }) {\\n  const loginSegment = useSelectedLayoutSegment('auth')\\n  // ...\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\n'use client'\\n\\nimport { useSelectedLayoutSegment } from 'next/navigation'\\n\\nexport default function Layout({ auth }) {\\n  const loginSegment = useSelectedLayoutSegment('auth')\\n  // ...\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Render Parallel Route Slot and Open Modal Link in Next.js Layout\\nDESCRIPTION: This layout component renders the `auth` parallel route slot alongside the main `children` content. It also includes a `<Link>` component that, when clicked, leverages Next.js routing to open the login modal by navigating to `/login` while preserving the current page context, demonstrating how to integrate the modal into your application's navigation.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_7\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nimport Link from 'next/link'\\n\\nexport default function Layout({\\n  auth,\\n  children,\\n}: {\\n  auth: React.ReactNode\\n  children: React.ReactNode\\n}) {\\n  return (\\n    <>\\n      <nav>\\n        <Link href=\\\"/login\\\">Open modal</Link>\\n      </nav>\\n      <div>{auth}</div>\\n      <div>{children}</div>\\n    </>\\n  )\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nimport Link from 'next/link'\\n\\nexport default function Layout({ auth, children }) {\\n  return (\\n    <>\\n      <nav>\\n        <Link href=\\\"/login\\\">Open modal</Link>\\n      </nav>\\n      <div>{auth}</div>\\n      <div>{children}</div>\\n    </>\\n  )\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Navigate to Dynamic Route with Next.js router.push\\nDESCRIPTION: Illustrates how to use `router.push` to navigate to a dynamic route (e.g., `/post/[pid]`) by providing the specific parameter value (e.g., `abc`) directly in the URL string.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_4\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nimport { useRouter } from 'next/router'\\n\\nexport default function Page() {\\n  const router = useRouter()\\n\\n  return (\\n    <button type=\\\"button\\\" onClick={() => router.push('/post/abc')}>\\n      Click me\\n    </button>\\n  )\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create Next.js App with Shallow Routing Example\\nDESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application pre-configured with the shallow routing example. It utilizes `create-next-app` and provides commands for `npx`, `yarn`, and `pnpm` to quickly set up the project.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_0\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nnpx create-next-app --example with-shallow-routing with-shallow-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nyarn create next-app --example with-shallow-routing with-shallow-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\npnpm create next-app --example with-shallow-routing with-shallow-routing-app\\n```\\n\\n========================\\nQUESTIONS AND ANSWERS\\n========================\\nTOPIC: Route Handlers and Middleware\\nQ: How do Next.js Route Handlers relate to API Routes in Next.js?\\nA: Next.js Route Handlers are the equivalent of API Routes found in the `pages` directory. Developers should not use both API Routes and Route Handlers together for the same functionality.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: Pages and Layouts\\nQ: What types of routing structures does the Next.js Pages Router support?\\nA: The Next.js Pages Router supports various routing structures, including index routes (e.g., `pages/index.js` maps to `/`), nested routes (e.g., `pages/blog/first-post.js` maps to `/blog/first-post`), and dynamic routes (e.g., `pages/posts/[id].js` handles paths like `/posts/1`).\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: route.js\\nQ: How can dynamic route parameters be accessed within Next.js Route Handlers?\\nA: Dynamic route parameters in Next.js Route Handlers are accessed via the `params` property within the `context` object. The `params` property is a promise that resolves to an object containing the dynamic route parameters for the current route.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_qa_4\\n\\n----------------------------------------\\n\\nTOPIC: Layouts and Pages\\nQ: How does Next.js handle routing?\\nA: Next.js uses file-system based routing, which means that folders and files are used to define the application's routes. This approach simplifies route management by mapping file paths directly to URL paths.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: Installation\\nQ: How does Next.js handle routing in applications using the App Router?\\nA: In Next.js applications utilizing the App Router, routing is managed through file-system routing. This means that the structure of files and folders within the `app` directory directly determines the application's routes.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_qa_5\\n\\n----------------------------------------\\n\\nTOPIC: Dynamic Routes\\nQ: What are Dynamic Routes in Next.js?\\nA: Dynamic Routes in Next.js are a feature that allows developers to create pages with custom parameters in their URLs. They are used when the exact segment names of a route are not known beforehand, enabling routes to be generated from dynamic data.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/02-dynamic-routes.mdx#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: Parallel Routes\\nQ: Why is a `404` rendered for unmatched routes if `default.js` is not present in Next.js Parallel Routes?\\nA: A `404` is rendered for unmatched routes when `default.js` is absent to prevent accidental rendering of a parallel route on a page it was not intended for. This ensures that only expected content is displayed.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_qa_9\\n\\n----------------------------------------\\n\\nTOPIC: Internationalization\\nQ: What are the two primary methods for internationalizing routing in Next.js?\\nA: Next.js routing can be internationalized using either a sub-path, such as `/fr/products`, or by using a domain, like `my-site.fr/products`. This allows for locale-specific URLs and redirection based on the locale inside Middleware.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_qa_3\\n\\n----------------------------------------\\n\\nTOPIC: Dynamic Route Segments\\nQ: What are Next.js Dynamic Route Segments used for?\\nA: Next.js Dynamic Route Segments are used to programmatically generate route segments from dynamic data. They are particularly useful when the exact route segment names are not known ahead of time.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: How to implement internationalization in Next.js\\nQ: What are the two main locale handling strategies available in Next.js for internationalization?\\nA: Next.js offers two primary locale handling strategies for internationalization: Sub-path Routing and Domain Routing. These strategies determine how locale information is incorporated into the application's URLs.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/internationalization.mdx#_qa_6\"\n      }\n    ]\n  },\n  \"raw\": {\n    \"result\": {\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"========================\\nCODE SNIPPETS\\n========================\\nTITLE: Next.js Pages Router Dynamic Routing Conventions\\nDESCRIPTION: Details the file and folder naming conventions for creating dynamic routes, catch-all routes, and optional catch-all routes in the Next.js Pages Router, allowing flexible URL patterns.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_8\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nPages Router Dynamic Routing Conventions:\\n\\nFolder Convention:\\n  [folder]/index.js / [folder]/index.jsx / [folder]/index.tsx\\n    - Route: /[param]\\n    - Description: Dynamic route segment (e.g., /users/[id]).\\n\\n  [...folder]/index.js / [...folder]/index.jsx / [...folder]/index.tsx\\n    - Route: /[...params]\\n    - Description: Catch-all route segment (e.g., /docs/a/b/c).\\n\\n  [[...folder]]/index.js / [[...folder]]/index.jsx / [[...folder]]/index.tsx\\n    - Route: /[[...params]]\\n    - Description: Optional catch-all route segment (e.g., /blog or /blog/a/b).\\n\\nFile Convention:\\n  [file].js / [file].jsx / [file].tsx\\n    - Route: /[param]\\n    - Description: Dynamic route segment (e.g., /users/[id]).\\n\\n  [...file].js / [...file].jsx / [...file].tsx\\n    - Route: /[...params]\\n    - Description: Catch-all route segment (e.g., /docs/a/b/c).\\n\\n  [[...file]].js / [[...file]].jsx / [[...file]].tsx\\n    - Route: /[[...params]]\\n    - Description: Optional catch-all route segment (e.g., /blog or /blog/a/b).\\n```\\n\\n----------------------------------------\\n\\nTITLE: Handling Dynamic Route Segments in Next.js Route Handlers\\nDESCRIPTION: This snippet illustrates how to capture dynamic route segments in a Next.js Route Handler. The `params` object, passed as an argument to the `GET` function, contains the values of the dynamic segments (e.g., `slug`), allowing the handler to respond based on the URL path.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_12\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nexport async function GET(\\n  request: Request,\\n  { params }: { params: Promise<{ slug: string }> }\\n) {\\n  const { slug } = await params // 'a', 'b', or 'c'\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport async function GET(request, { params }) {\\n  const { slug } = await params // 'a', 'b', or 'c'\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Creating Dynamic Next.js API Routes\\nDESCRIPTION: Details the implementation of dynamic API routes in Next.js, which follow the same file naming conventions as dynamic pages. This allows API routes to capture variable segments from the URL. The example demonstrates accessing dynamic parameters via `req.query`.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_15\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  const { pid } = req.query\\n  res.end(`Post: ${pid}`)\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  const { pid } = req.query\\n  res.end(`Post: ${pid}`)\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Optional Catch-all API Route Query Object Variations\\nDESCRIPTION: This snippet illustrates the `req.query` object's structure for Next.js optional catch-all API routes (`[[...slug]]`). It shows how the `slug` parameter is an empty object when the base route is accessed, and an array when path segments are present, similar to regular catch-all routes.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_17\\n\\nLANGUAGE: JSON\\nCODE:\\n```\\n{\\n} // GET `/api/post` (empty object)\\n{\\n  \\\"slug\\\": [\\\"a\\\"]\\n} // `GET /api/post/a` (single-element array)\\n{\\n  \\\"slug\\\": [\\\"a\\\", \\\"b\\\"]\\n} // `GET /api/post/a/b` (multi-element array)\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implement Next.js Catch-all API Route Handler\\nDESCRIPTION: This snippet demonstrates how to create a catch-all API route in Next.js using `[...slug].ts` or `[...slug].js`. It shows how the `slug` parameter from the URL is accessed via `req.query` as an array, allowing the route to match multiple path segments. The handler then responds by joining the slug segments.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_16\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  const { slug } = req.query\\n  res.end(`Post: ${slug.join(', ')}`)\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  const { slug } = req.query\\n  res.end(`Post: ${slug.join(', ')}`)\\n}\\n```\\n\\nLANGUAGE: JSON\\nCODE:\\n```\\n{\\n  \\\"slug\\\": [\\\"a\\\"]\\n}\\n\\n{\\n  \\\"slug\\\": [\\\"a\\\", \\\"b\\\"]\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Parallel and Intercepted Route Conventions\\nDESCRIPTION: Details advanced routing patterns in Next.js, including named slots for parallel routes and conventions for intercepting routes at different levels of the file system hierarchy.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_5\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nNext.js Parallel and Intercepted Route Conventions:\\n\\n- Parallel Routes:\\n  - @folder: Named Slot. Defines a named slot for parallel routes, allowing multiple routes to be rendered simultaneously in the same layout.\\n\\n- Intercepting Routes:\\n  - (.)folder: Intercepts a route at the same level. Used to show a route from a different part of the app within the current layout.\\n  - (..)folder: Intercepts a route one level above. Navigates up one directory to intercept a route.\\n  - (..)(..)folder: Intercepts a route two levels above. Navigates up two directories to intercept a route.\\n  - (...)folder: Intercepts a route from the root. Navigates to the root of the application to intercept a route.\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configuring Route Segment Options for Next.js Route Handler (JavaScript)\\nDESCRIPTION: This snippet illustrates how to apply route segment configuration options to a Next.js Route Handler. It exports constants like `dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, and `preferredRegion` to control caching behavior, data fetching, and deployment environment for the specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_25\\n\\nLANGUAGE: js\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configuring Route Segment Options for Next.js Route Handler (TypeScript)\\nDESCRIPTION: This snippet illustrates how to apply route segment configuration options to a Next.js Route Handler. It exports constants like `dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, and `preferredRegion` to control caching behavior, data fetching, and deployment environment for the specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_24\\n\\nLANGUAGE: ts\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\n----------------------------------------\\n\\nTITLE: Handle HTTP Methods in Next.js API Routes\\nDESCRIPTION: Illustrates how to process different HTTP methods (e.g., POST) within a Next.js API route using `req.method`. This allows for distinct logic based on the incoming request type, enabling a single API route file to handle multiple HTTP verbs.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_2\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  if (req.method === 'POST') {\\n    // Process a POST request\\n  } else {\\n    // Handle any other HTTP method\\n  }\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  if (req.method === 'POST') {\\n    // Process a POST request\\n  } else {\\n    // Handle any other HTTP method\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Handle dynamic route segments in Next.js Route Handlers\\nDESCRIPTION: Demonstrates how to extract dynamic parameters from the URL using the `params` object in a Next.js Route Handler. The `slug` parameter is accessed from the `params` object, which is a Promise that resolves to an object containing the dynamic segments.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_13\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport async function GET(request, { params }) {\\n  const { slug } = await params // 'a', 'b', or 'c'\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Access Dynamic Route Parameters via Context Object\\nDESCRIPTION: Demonstrates how to retrieve dynamic route parameters from the `context` object passed to a route handler. The `params` property within `context` is a promise that resolves to an object containing the dynamic segments of the URL.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_3\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET(\\n  request: Request,\\n  { params }: { params: Promise<{ team: string }> }\\n) {\\n  const { team } = await params\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET(request, { params }) {\\n  const { team } = await params\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Statically Generate Next.js Routes with `generateStaticParams`\\nDESCRIPTION: This example demonstrates how to use the `generateStaticParams` function to pre-render dynamic routes at build time. It fetches data (e.g., posts) and returns an array of objects, each defining the parameters required for a specific static route. This approach optimizes build performance by automatically deduplicating `fetch` requests across different parts of the application.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_3\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nexport async function generateStaticParams() {\\n  const posts = await fetch('https://.../posts').then((res) => res.json())\\n\\n  return posts.map((post) => ({\\n    slug: post.slug,\\n  }))\\n}\\n```\\n\\nLANGUAGE: JSX\\nCODE:\\n```\\nexport async function generateStaticParams() {\\n  const posts = await fetch('https://.../posts').then((res) => res.json())\\n\\n  return posts.map((post) => ({\\n    slug: post.slug,\\n  }))\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Dynamic Route Parameter Mapping Conventions\\nDESCRIPTION: This section illustrates how different Next.js dynamic routing conventions map to the `router.query` object. It covers single dynamic segments, catch-all segments, and optional catch-all segments, showing the structure of the `params` object for various URL patterns and their corresponding file system conventions.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/02-dynamic-routes.mdx#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nDynamic Segment: [segmentName]\\n  - Convention: Wrapping a file or folder name in square brackets (e.g., `pages/blog/[slug].js`).\\n  - Description: Matches a single segment in the URL.\\n  - `router.query` mapping examples:\\n    - Route: `pages/blog/[slug].js`\\n    - URL: `/blog/a`   -> `router.query`: `{ slug: 'a' }`\\n    - URL: `/blog/b`   -> `router.query`: `{ slug: 'b' }`\\n    - URL: `/blog/c`   -> `router.query`: `{ slug: 'c' }`\\n\\nCatch-all Segment: [...segmentName]\\n  - Convention: Adding an ellipsis inside the brackets (e.g., `pages/shop/[...slug].js`).\\n  - Description: Matches all subsequent segments in the URL and collects them into an array.\\n  - `router.query` mapping examples:\\n    - Route: `pages/shop/[...slug].js`\\n    - URL: `/shop/a`       -> `router.query`: `{ slug: ['a'] }`\\n    - URL: `/shop/a/b`     -> `router.query`: `{ slug: ['a', 'b'] }`\\n    - URL: `/shop/a/b/c`   -> `router.query`: `{ slug: ['a', 'b', 'c'] }`\\n\\nOptional Catch-all Segment: [[...segmentName]]\\n  - Convention: Including the parameter in double square brackets (e.g., `pages/shop/[[...slug]].js`).\\n  - Description: Matches all subsequent segments (like catch-all) but also matches the base path without any dynamic segments. The parameter will be `undefined` if no segments are present.\\n  - `router.query` mapping examples:\\n    - Route: `pages/shop/[[...slug]].js`\\n    - URL: `/shop`         -> `router.query`: `{ slug: undefined }`\\n    - URL: `/shop/a`       -> `router.query`: `{ slug: ['a'] }`\\n    - URL: `/shop/a/b`     -> `router.query`: `{ slug: ['a', 'b'] }`\\n    - URL: `/shop/a/b/c`   -> `router.query`: `{ slug: ['a', 'b', 'c'] }`\\n```\\n\\n----------------------------------------\\n\\nTITLE: Access Dynamic Route Params in Server Layouts\\nDESCRIPTION: Demonstrates how to retrieve dynamic route segments (`params`) in an `async` server component layout. The `params` prop is now a Promise in Next.js 15+, which needs to be awaited to extract the route parameters, allowing content to be displayed based on the URL.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_15\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nexport default async function DashboardLayout({\\n  children,\\n  params,\\n}: {\\n  children: React.ReactNode\\n  params: Promise<{ team: string }>\\n}) {\\n  const { team } = await params\\n\\n  return (\\n    <section>\\n      <header>\\n        <h1>Welcome to {team}'s Dashboard</h1>\\n      </header>\\n      <main>{children}</main>\\n    </section>\\n  )\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nexport default async function DashboardLayout({ children, params }) {\\n  const { team } = await params\\n\\n  return (\\n    <section>\\n      <header>\\n        <h1>Welcome to {team}'s Dashboard</h1>\\n      </header>\\n      <main>{children}</main>\\n    </section>\\n  )\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Route `params` Type Definitions\\nDESCRIPTION: This table outlines the TypeScript type definitions for the `params` object based on different Next.js route segment configurations. It shows how dynamic segments, catch-all segments, and optional catch-all segments influence the expected type of the `slug` or other parameter properties, providing a clear guide for type-safe route handling.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_2\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nRoute: app/blog/[slug]/page.js\\nparams Type Definition: { slug: string }\\n\\nRoute: app/shop/[...slug]/page.js\\nparams Type Definition: { slug: string[] }\\n\\nRoute: app/shop/[[...slug]]/page.js\\nparams Type Definition: { slug?: string[] }\\n\\nRoute: app/[categoryId]/[itemId]/page.js\\nparams Type Definition: { categoryId: string, itemId: string }\\n```\\n\\n----------------------------------------\\n\\nTITLE: Enable External Resolver for API Route\\nDESCRIPTION: This snippet sets the `externalResolver` flag to `true`, indicating that the API route is handled by an external resolver like Express or Connect. Enabling this option suppresses warnings for unresolved requests.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_7\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport const config = {\\n  api: {\\n    externalResolver: true\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Caching a GET Route Handler in JavaScript\\nDESCRIPTION: This example shows how to enable caching for a GET Route Handler by setting `export const dynamic = 'force-static'`. The handler fetches data from an external API and returns it as JSON, demonstrating how to make a static data fetch within a cached route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_3\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport const dynamic = 'force-static'\\n\\nexport async function GET() {\\n  const res = await fetch('https://data.mongodb-api.com/...', {\\n    headers: {\\n      'Content-Type': 'application/json',\\n      'API-Key': process.env.DATA_API_KEY,\\n    },\\n  })\\n  const data = await res.json()\\n\\n  return Response.json({ data })\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create a basic Next.js API Route\\nDESCRIPTION: Demonstrates how to create a simple API route in Next.js that returns a JSON response. Files inside `pages/api` are treated as API endpoints. This example shows both TypeScript and JavaScript implementations.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_0\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\ntype ResponseData = {\\n  message: string\\n}\\n\\nexport default function handler(\\n  req: NextApiRequest,\\n  res: NextApiResponse<ResponseData>\\n) {\\n  res.status(200).json({ message: 'Hello from Next.js!' })\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function handler(req, res) {\\n  res.status(200).json({ message: 'Hello from Next.js!' })\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configure Route Segment Options in Next.js Route Handler\\nDESCRIPTION: Demonstrates how to set various route segment configuration options within a Next.js Route Handler file. These options control behavior like dynamic routing, revalidation, caching, runtime environment, and preferred region. This allows fine-grained control over the handler's deployment and data fetching strategy.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_22\\n\\nLANGUAGE: ts\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\nLANGUAGE: js\\nCODE:\\n```\\nexport const dynamic = 'auto'\\nexport const dynamicParams = true\\nexport const revalidate = false\\nexport const fetchCache = 'auto'\\nexport const runtime = 'nodejs'\\nexport const preferredRegion = 'auto'\\n```\\n\\n----------------------------------------\\n\\nTITLE: Bootstrap Next.js i18n Routing Example Project\\nDESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the internationalized routing example. You can choose your preferred package manager: npm, Yarn, or pnpm.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing/README.md#_snippet_0\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nnpx create-next-app --example i18n-routing i18n-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nyarn create next-app --example i18n-routing i18n-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\npnpm create next-app --example i18n-routing i18n-routing-app\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js API Route Handler Parameters\\nDESCRIPTION: Defines the signature and types for the `handler` function in Next.js API Routes, detailing the `req` (request) and `res` (response) objects available, which are instances of Node.js `http.IncomingMessage` and `http.ServerResponse` respectively.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\\n  // ...\\n}\\n\\n- req: An instance of [http.IncomingMessage](https://nodejs.org/api/http.html#class-httpincomingmessage)\\n- res: An instance of [http.ServerResponse](https://nodejs.org/api/http.html#class-httpserverresponse)\\n```\\n\\n----------------------------------------\\n\\nTITLE: Conditionally Render Routes Based on User Role\\nDESCRIPTION: This example illustrates how to use Parallel Routes to conditionally render different layouts or components based on specific conditions, such as a user's role. The `checkUserRole` function determines the role, and the layout renders either the `admin` or `user` content accordingly, providing a flexible way to manage access.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_2\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nimport { checkUserRole } from '@/lib/auth'\\n\\nexport default function Layout({\\n  user,\\n  admin,\\n}: {\\n  user: React.ReactNode\\n  admin: React.ReactNode\\n}) {\\n  const role = checkUserRole()\\n  return role === 'admin' ? admin : user\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nimport { checkUserRole } from '@/lib/auth'\\n\\nexport default function Layout({ user, admin }) {\\n  const role = checkUserRole()\\n  return role === 'admin' ? admin : user\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js App Router: Routing and Rendering Best Practices\\nDESCRIPTION: Covers key concepts and best practices for routing and rendering in the Next.js App Router, including layouts, navigation, error handling, and Server/Client Components.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_0\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nLayouts:\\n  Purpose: Share UI across pages and enable partial rendering on navigation.\\n  Reference: /docs/app/api-reference/file-conventions/layout\\n\\n<Link> component:\\n  Purpose: Client-side navigation and prefetching.\\n  Reference: /docs/app/api-reference/components/link\\n\\nError Handling:\\n  Purpose: Gracefully handle catch-all errors and 404 errors in production by creating custom error pages.\\n  References: /docs/app/getting-started/error-handling, /docs/app/api-reference/file-conventions/not-found\\n\\nClient and Server Components:\\n  Purpose: Follow recommended composition patterns and check placement of \\\"use client\\\" boundaries to avoid unnecessarily increasing client-side JavaScript bundle.\\n  Reference: /docs/app/getting-started/server-and-client-components#examples\\n\\nDynamic APIs (e.g., cookies, searchParams):\\n  Purpose: Be aware that usage will opt the entire route into Dynamic Rendering (or whole application if used in Root Layout). Ensure intentional usage and wrap in <Suspense> boundaries where appropriate.\\n  References: /docs/app/api-reference/functions/cookies, /docs/app/api-reference/file-conventions/page#searchparams-optional, /docs/app/getting-started/partial-prerendering#dynamic-rendering\\n\\nPartial Prerendering (experimental):\\n  Purpose: Allows parts of a route to be dynamic without opting the whole route into dynamic rendering.\\n  Reference: /blog/next-14#partial-prerendering-preview\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Intercepting Routes File Conventions\\nDESCRIPTION: Defines the special file naming conventions used in Next.js to create intercepting routes. These conventions allow developers to specify how route segments should be matched relative to the current location, enabling features like displaying content in a modal without changing the URL. This mechanism is based on route segments, not the file-system.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/intercepting-routes.mdx#_snippet_0\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nIntercepting Routes Conventions:\\n\\n- (.) : Match segments on the same level\\n- (..) : Match segments one level above\\n- (..)(..) : Match segments two levels above\\n- (...) : Match segments from the root `app` directory\\n\\nExample Usage:\\nTo intercept the `photo` segment from within the `feed` segment, create a `(..)photo` directory structure. This means the `photo` route is one segment level higher, even if it's two file-system levels higher due to Parallel Routes slots (e.g., `@modal`).\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implementing Redirects in Next.js API Routes\\nDESCRIPTION: Explains how to perform client-side redirects from Next.js API routes to a specified path or URL. This is useful for post-submission actions, such as redirecting after a successful form submission. The example uses `res.redirect()` with a status code.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_13\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default async function handler(\\n  req: NextApiRequest,\\n  res: NextApiResponse\\n) {\\n  const { name, message } = req.body\\n\\n  try {\\n    await handleFormInputAsync({ name, message })\\n    res.redirect(307, '/')\\n  } catch (err) {\\n    res.status(500).send({ error: 'Failed to fetch data' })\\n  }\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default async function handler(req, res) {\\n  const { name, message } = req.body\\n\\n  try {\\n    await handleFormInputAsync({ name, message })\\n    res.redirect(307, '/')\\n  } catch (err) {\\n    res.status(500).send({ error: 'failed to fetch data' })\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Shallow Routing Limitation: Cross-Page Navigation\\nDESCRIPTION: This example highlights a key limitation of shallow routing: it only applies to URL changes within the *current* page. Attempting to use `router.push` with `shallow: true` to navigate to a different page (e.g., `/about`) will still result in a full page unload and reload, bypassing the shallow routing mechanism. This behavior ensures proper page loading for new routes.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_6\\n\\nLANGUAGE: js\\nCODE:\\n```\\nrouter.push('/?counter=10', '/about?counter=10', { shallow: true })\\n```\\n\\n----------------------------------------\\n\\nTITLE: Sending HTTP Responses in Next.js API Routes\\nDESCRIPTION: Illustrates sending generic HTTP responses from Next.js API routes, similar to JSON responses but allowing string, object, or Buffer bodies. It covers setting status codes and implementing error handling. This method provides flexibility for various response types.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_12\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nimport type { NextApiRequest, NextApiResponse } from 'next'\\n\\nexport default async function handler(\\n  req: NextApiRequest,\\n  res: NextApiResponse\\n) {\\n  try {\\n    const result = await someAsyncOperation()\\n    res.status(200).send({ result })\\n  } catch (err) {\\n    res.status(500).send({ error: 'failed to fetch data' })\\n  }\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default async function handler(req, res) {\\n  try {\\n    const result = await someAsyncOperation()\\n    res.status(200).send({ result })\\n  } catch (err) {\\n    res.status(500).send({ error: 'failed to fetch data' })\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Define GET Route Handlers in Next.js App Router\\nDESCRIPTION: This example shows how to create custom request handlers, known as Route Handlers, in the Next.js `app` directory. Route Handlers replace API Routes from the `pages` directory and leverage Web Request and Response APIs to handle incoming HTTP requests for a given route. This snippet specifically demonstrates a GET handler.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_33\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET(request: Request) {}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implement Basic GET Route Handler\\nDESCRIPTION: Demonstrates how to create a simple GET route handler that returns a JSON response. This example uses the Web Response API to send 'Hello World' as JSON.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_0\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET() {\\n  return Response.json({ message: 'Hello World' })\\n}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET() {\\n  return Response.json({ message: 'Hello World' })\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Initialize Next.js Pages Route Module\\nDESCRIPTION: This JavaScript snippet initializes a `PagesRouteModule` instance, a fundamental component for server-side routing in Next.js. It imports various internal modules like `PagesRouteModule`, `RouteKind`, `App`, `Document`, and userland code. The module is configured with route definition details and then exported, enabling Next.js to handle page-based routing within the Turbopack environment.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_18\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 0\\n};\\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 2\\n};\\nimport { RouteKind } from '../../server/future/route-kind';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 8\\n};\\nimport App from 'VAR_MODULE_APP';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 6\\n};\\nimport Document from 'VAR_MODULE_DOCUMENT';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 10\\n};\\nimport * as userland from 'VAR_USERLAND';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 22\\n};\\nconst routeModule = new PagesRouteModule({\\n    definition: {\\n        kind: RouteKind.PAGES,\\n        page: 'VAR_DEFINITION_PAGE',\\n        pathname: 'VAR_DEFINITION_PATHNAME',\\n        bundlePath: '',\\n        filename: ''\\n    },\\n    components: {\\n        App,\\n        Document\\n    },\\n    userland\\n});\\nexport { routeModule };\\nexport { routeModule as l } from \\\"__TURBOPACK_VAR__\\\" assert {\\n    __turbopack_var__: true\\n};\\nexport { };\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js App Router: Create Dynamic Blog Post Page\\nDESCRIPTION: This snippet illustrates how to create a dynamic route for individual blog posts in Next.js. By wrapping the folder name in square brackets (`[slug]`), it allows the route to generate multiple pages based on data. The `generateStaticParams` function is typically used for static generation of these dynamic routes.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_3\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nfunction generateStaticParams() {}\\n\\nexport default function Page() {\\n  return <h1>Hello, Blog Post Page!</h1>\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nfunction generateStaticParams() {}\\n\\nexport default function Page() {\\n  return <h1>Hello, Blog Post Page!</h1>\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Pages Router: Routing and Rendering Best Practices\\nDESCRIPTION: Covers key concepts and best practices for routing and rendering in the Next.js Pages Router, including navigation and custom error pages.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_1\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\n<Link> component:\\n  Purpose: Client-side navigation and prefetching.\\n  Reference: /docs/pages/building-your-application/routing/linking-and-navigating\\n\\nCustom Errors:\\n  Purpose: Gracefully handle 500 and 404 errors by creating custom error pages.\\n  References: /docs/pages/building-your-application/routing/custom-error#500-page, /docs/pages/building-your-application/routing/custom-error#404-page\\n```\\n\\n----------------------------------------\\n\\nTITLE: Route Handler Conflict with Page in TypeScript\\nDESCRIPTION: This snippet illustrates a conflict scenario where a `route.ts` file and a `page.ts` file exist at the same route segment level. Next.js does not allow this configuration, as each `route.js` or `page.js` file takes over all HTTP verbs for that specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_4\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.ts`\\nexport async function POST(request: Request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Performing Server-Side Redirects in Next.js Route Handlers\\nDESCRIPTION: This example demonstrates how to perform a server-side redirect within a Next.js Route Handler using the `redirect` function from `next/navigation`. When this handler is accessed, it will redirect the client to the specified URL.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_11\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nimport { redirect } from 'next/navigation'\\n\\nexport async function GET(request: Request) {\\n  redirect('https://nextjs.org/')\\n}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nimport { redirect } from 'next/navigation'\\n\\nexport async function GET(request) {\\n  redirect('https://nextjs.org/')\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Route Resolution Conflict Example\\nDESCRIPTION: Demonstrates a conflict scenario where a `route.js` (or `route.ts`) file cannot coexist at the same path as a `page.js` (or `page.ts`) file in Next.js, as both attempt to handle HTTP verbs for the route. This highlights the mutual exclusivity of these routing primitives at the same level.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_3\\n\\nLANGUAGE: TypeScript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.ts`\\nexport async function POST(request: Request) {}\\n```\\n\\nLANGUAGE: JavaScript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.js`\\nexport async function POST(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Implement Next.js Middleware for Dynamic Multi-Zone Routing\\nDESCRIPTION: This example illustrates how to use Next.js middleware (`middleware.js`) for dynamic routing decisions in a multi-zone environment. It's particularly useful when `rewrites` are insufficient, such as when routing depends on a feature flag or during a migration, allowing for conditional path rewriting based on runtime logic.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_3\\n\\nLANGUAGE: js\\nCODE:\\n```\\nexport async function middleware(request) {\\n  const { pathname, search } = req.nextUrl;\\n  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {\\n    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});\\n  }\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Route Handler Conflict with Page in JavaScript\\nDESCRIPTION: This snippet illustrates a conflict scenario where a `route.js` file and a `page.js` file exist at the same route segment level. Next.js does not allow this configuration, as each `route.js` or `page.js` file takes over all HTTP verbs for that specific route.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_5\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport default function Page() {\\n  return <h1>Hello, Next.js!</h1>\\n}\\n\\n// ❌ Conflict\\n// `app/route.js`\\nexport async function POST(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Configure Next.js Rewrites for Multi-Zone Routing\\nDESCRIPTION: This snippet demonstrates how to use the `rewrites` configuration in `next.config.js` to route requests to different zones in a Next.js multi-zone setup. It includes examples for routing specific paths and static assets, emphasizing that the `destination` should be a full URL pointing to the zone's production domain or a local development server.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_2\\n\\nLANGUAGE: js\\nCODE:\\n```\\nasync rewrites() {\\n    return [\\n        {\\n            source: '/blog',\\n            destination: `${process.env.BLOG_DOMAIN}/blog`,\\n        },\\n        {\\n            source: '/blog/:path+',\\n            destination: `${process.env.BLOG_DOMAIN}/blog/:path+`,\\n        },\\n        {\\n            source: '/blog-static/:path+',\\n            destination: `${process.env.BLOG_DOMAIN}/blog-static/:path+`,\\n        }\\n    ];\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Next.js Route Handlers API Reference\\nDESCRIPTION: Comprehensive reference for Next.js Route Handlers, including file conventions, supported HTTP methods, extended Request/Response APIs, and caching options. This section details how to structure Route Handlers and leverage Next.js-specific features.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_2\\n\\nLANGUAGE: APIDOC\\nCODE:\\n```\\nNext.js Route Handlers:\\n  File Convention: `route.js|ts`\\n    - Purpose: Defines a custom request handler for a given route.\\n    - Location: Must be inside the `app` directory.\\n    - Constraint: Cannot be at the same route segment level as `page.js`.\\n  Supported HTTP Methods:\\n    - Methods: `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, `OPTIONS`\\n    - Behavior: If an unsupported method is called, Next.js returns `405 Method Not Allowed`.\\n  Request/Response APIs:\\n    - Native: Web `Request`, `Response` (standard browser APIs).\\n    - Extended: `NextRequest`, `NextResponse` (Next.js specific helpers for advanced use cases).\\n  Caching for GET Methods:\\n    - Default: Not cached.\\n    - Opt-in: `export const dynamic = 'force-static'`\\n      - Purpose: Forces static rendering and caching of the `GET` response.\\n      - Limitation: Only applies to `GET` methods; other HTTP methods in the same file are not cached.\\n  Special Route Handlers:\\n    - Examples: `sitemap.ts`, `opengraph-image.tsx`, `icon.tsx`, and other metadata files.\\n    - Behavior: Remain static by default unless they use Dynamic APIs or dynamic config options.\\n```\\n\\n----------------------------------------\\n\\nTITLE: Define Route Handlers (App Router)\\nDESCRIPTION: This example shows how to define Route Handlers in the Next.js `app` directory, which replace traditional API Routes. Route Handlers allow you to create custom request handlers for specific HTTP methods (e.g., GET, POST) using Web Request and Response APIs.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_30\\n\\nLANGUAGE: typescript\\nCODE:\\n```\\nexport async function GET(request: Request) {}\\n```\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nexport async function GET(request) {}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Define Next.js Pages Route Module with Turbopack\\nDESCRIPTION: This JavaScript snippet defines a `PagesRouteModule` for a Next.js application, integrating `App`, `Document`, and userland components. It specifies the route definition including kind, page, and pathname, demonstrating how Next.js routes are configured within a Turbopack build environment. This module is crucial for handling page-based routing in Next.js.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/template-pages/output.md#_snippet_59\\n\\nLANGUAGE: javascript\\nCODE:\\n```\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 0\\n};\\nimport { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 2\\n};\\nimport { RouteKind } from '../../server/future/route-kind';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 8\\n};\\nimport App from 'VAR_MODULE_APP';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 6\\n};\\nimport Document from 'VAR_MODULE_DOCUMENT';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 10\\n};\\nimport * as userland from 'VAR_USERLAND';\\nimport \\\"__TURBOPACK_PART__\\\" assert {\\n    __turbopack_part__: 22\\n};\\nconst routeModule = new PagesRouteModule({\\n    definition: {\\n        kind: RouteKind.PAGES,\\n        page: 'VAR_DEFINITION_PAGE',\\n        pathname: 'VAR_DEFINITION_PATHNAME',\\n        bundlePath: '',\\n        filename: ''\\n    },\\n    components: {\\n        App,\\n        Document\\n    },\\n    userland\\n});\\nexport { routeModule };\\nexport { routeModule as l } from \\\"__TURBOPACK_VAR__\\\" assert {\\n    __turbopack_var__: true\\n};\\nexport { };\\n```\\n\\n----------------------------------------\\n\\nTITLE: Bootstrap Next.js i18n Routing Example App\\nDESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the internationalized routing example. Users can choose their preferred package manager: npm (via npx), Yarn, or pnpm, to quickly set up the project.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/i18n-routing-pages/README.md#_snippet_0\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nnpx create-next-app --example i18n-routing-pages i18n-routing-pages-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nyarn create next-app --example i18n-routing-pages i18n-routing-pages-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\npnpm create next-app --example i18n-routing-pages i18n-routing-pages-app\\n```\\n\\n----------------------------------------\\n\\nTITLE: Read Active Route Segment with useSelectedLayoutSegment\\nDESCRIPTION: This snippet demonstrates how to use `useSelectedLayoutSegment` from `next/navigation` to read the active route segment within a parallel route slot. It accepts an optional `parallelRoutesKey` parameter to specify the slot. For example, `loginSegment` will be 'login' when navigating to `app/@auth/login`.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_1\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\n'use client'\\n\\nimport { useSelectedLayoutSegment } from 'next/navigation'\\n\\nexport default function Layout({ auth }: { auth: React.ReactNode }) {\\n  const loginSegment = useSelectedLayoutSegment('auth')\\n  // ...\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\n'use client'\\n\\nimport { useSelectedLayoutSegment } from 'next/navigation'\\n\\nexport default function Layout({ auth }) {\\n  const loginSegment = useSelectedLayoutSegment('auth')\\n  // ...\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Render Parallel Route Slot and Open Modal Link in Next.js Layout\\nDESCRIPTION: This layout component renders the `auth` parallel route slot alongside the main `children` content. It also includes a `<Link>` component that, when clicked, leverages Next.js routing to open the login modal by navigating to `/login` while preserving the current page context, demonstrating how to integrate the modal into your application's navigation.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_7\\n\\nLANGUAGE: tsx\\nCODE:\\n```\\nimport Link from 'next/link'\\n\\nexport default function Layout({\\n  auth,\\n  children,\\n}: {\\n  auth: React.ReactNode\\n  children: React.ReactNode\\n}) {\\n  return (\\n    <>\\n      <nav>\\n        <Link href=\\\"/login\\\">Open modal</Link>\\n      </nav>\\n      <div>{auth}</div>\\n      <div>{children}</div>\\n    </>\\n  )\\n}\\n```\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nimport Link from 'next/link'\\n\\nexport default function Layout({ auth, children }) {\\n  return (\\n    <>\\n      <nav>\\n        <Link href=\\\"/login\\\">Open modal</Link>\\n      </nav>\\n      <div>{auth}</div>\\n      <div>{children}</div>\\n    </>\\n  )\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Navigate to Dynamic Route with Next.js router.push\\nDESCRIPTION: Illustrates how to use `router.push` to navigate to a dynamic route (e.g., `/post/[pid]`) by providing the specific parameter value (e.g., `abc`) directly in the URL string.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_4\\n\\nLANGUAGE: jsx\\nCODE:\\n```\\nimport { useRouter } from 'next/router'\\n\\nexport default function Page() {\\n  const router = useRouter()\\n\\n  return (\\n    <button type=\\\"button\\\" onClick={() => router.push('/post/abc')}>\\n      Click me\\n    </button>\\n  )\\n}\\n```\\n\\n----------------------------------------\\n\\nTITLE: Create Next.js App with Shallow Routing Example\\nDESCRIPTION: This snippet demonstrates how to bootstrap a Next.js application pre-configured with the shallow routing example. It utilizes `create-next-app` and provides commands for `npx`, `yarn`, and `pnpm` to quickly set up the project.\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_0\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nnpx create-next-app --example with-shallow-routing with-shallow-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\nyarn create next-app --example with-shallow-routing with-shallow-routing-app\\n```\\n\\nLANGUAGE: bash\\nCODE:\\n```\\npnpm create next-app --example with-shallow-routing with-shallow-routing-app\\n```\\n\\n========================\\nQUESTIONS AND ANSWERS\\n========================\\nTOPIC: Route Handlers and Middleware\\nQ: How do Next.js Route Handlers relate to API Routes in Next.js?\\nA: Next.js Route Handlers are the equivalent of API Routes found in the `pages` directory. Developers should not use both API Routes and Route Handlers together for the same functionality.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: Pages and Layouts\\nQ: What types of routing structures does the Next.js Pages Router support?\\nA: The Next.js Pages Router supports various routing structures, including index routes (e.g., `pages/index.js` maps to `/`), nested routes (e.g., `pages/blog/first-post.js` maps to `/blog/first-post`), and dynamic routes (e.g., `pages/posts/[id].js` handles paths like `/posts/1`).\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_qa_2\\n\\n----------------------------------------\\n\\nTOPIC: route.js\\nQ: How can dynamic route parameters be accessed within Next.js Route Handlers?\\nA: Dynamic route parameters in Next.js Route Handlers are accessed via the `params` property within the `context` object. The `params` property is a promise that resolves to an object containing the dynamic route parameters for the current route.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_qa_4\\n\\n----------------------------------------\\n\\nTOPIC: Layouts and Pages\\nQ: How does Next.js handle routing?\\nA: Next.js uses file-system based routing, which means that folders and files are used to define the application's routes. This approach simplifies route management by mapping file paths directly to URL paths.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: Installation\\nQ: How does Next.js handle routing in applications using the App Router?\\nA: In Next.js applications utilizing the App Router, routing is managed through file-system routing. This means that the structure of files and folders within the `app` directory directly determines the application's routes.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_qa_5\\n\\n----------------------------------------\\n\\nTOPIC: Dynamic Routes\\nQ: What are Dynamic Routes in Next.js?\\nA: Dynamic Routes in Next.js are a feature that allows developers to create pages with custom parameters in their URLs. They are used when the exact segment names of a route are not known beforehand, enabling routes to be generated from dynamic data.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/02-dynamic-routes.mdx#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: Parallel Routes\\nQ: Why is a `404` rendered for unmatched routes if `default.js` is not present in Next.js Parallel Routes?\\nA: A `404` is rendered for unmatched routes when `default.js` is absent to prevent accidental rendering of a parallel route on a page it was not intended for. This ensures that only expected content is displayed.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_qa_9\\n\\n----------------------------------------\\n\\nTOPIC: Internationalization\\nQ: What are the two primary methods for internationalizing routing in Next.js?\\nA: Next.js routing can be internationalized using either a sub-path, such as `/fr/products`, or by using a domain, like `my-site.fr/products`. This allows for locale-specific URLs and redirection based on the locale inside Middleware.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_qa_3\\n\\n----------------------------------------\\n\\nTOPIC: Dynamic Route Segments\\nQ: What are Next.js Dynamic Route Segments used for?\\nA: Next.js Dynamic Route Segments are used to programmatically generate route segments from dynamic data. They are particularly useful when the exact route segment names are not known ahead of time.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_qa_0\\n\\n----------------------------------------\\n\\nTOPIC: How to implement internationalization in Next.js\\nQ: What are the two main locale handling strategies available in Next.js for internationalization?\\nA: Next.js offers two primary locale handling strategies for internationalization: Sub-path Routing and Domain Routing. These strategies determine how locale information is incorporated into the application's URLs.\\n\\n\\nSOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/internationalization.mdx#_qa_6\"\n        }\n      ]\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1121350\n  }\n}\n\n请分析这个测试是否通过，并提供详细分析。\n"
            }
        ],
        "stream": false
    },
    "response": {
        "id": "chatcmpl-a40c0804-409b-9267-850d-f2fbf27f060b",
        "choices": [
            {
                "finish_reason": "stop",
                "index": 0,
                "logprobs": null,
                "message": {
                    "content": "```json\n{\n  \"status\": \"pass\",\n  \"confidence\": 0.97,\n  \"analysis\": \"测试通过。工具成功响应了对 `/vercel/next.js` 库中 `routing` 主题的文档请求，返回了大量与 Next.js 路由机制相关的代码片段、配置说明、最佳实践以及问答内容，涵盖了动态路由、捕获路由、并行路由、拦截路由、国际化路由等核心概念。文档内容结构清晰，信息完整，且与用户请求的主题高度相关，符合 'success' 类型的期望结果。此外，响应时间在合理范围内，未出现错误或超时情况。\",\n  \"issues\": [\n    \"响应内容虽然相关，但部分代码片段重复出现，可能影响信息密度。\",\n    \"未明确标注文档的版本号或更新时间，无法确认是否为最新版本。\",\n    \"部分代码片段中包含占位符（如 `VAR_DEFINITION_PAGE`），可能影响用户对实际配置的理解。\",\n    \"未提供文档摘要或推荐理由，用户需自行筛选关键信息。\"\n  ],\n  \"recommendations\": [\n    \"在响应中添加文档版本或更新时间戳，确保用户获取的是最新内容。\",\n    \"对返回的代码片段进行去重和归类，提升信息密度和可读性。\",\n    \"提供文档摘要或推荐理由，帮助用户快速判断文档相关性。\",\n    \"支持分页、搜索或过滤功能，提升文档查询的可用性和性能。\",\n    \"优化响应结构，使用清晰的章节划分（如路由类型、API 参考、最佳实践等）。\",\n    \"在并行路由、拦截路由等复杂功能中提供更详细的使用场景说明，增强用户理解。\"\n  ]\n}\n```",
                    "refusal": null,
                    "role": "assistant",
                    "annotations": null,
                    "audio": null,
                    "function_call": null,
                    "tool_calls": null
                }
            }
        ],
        "created": 1755361162,
        "model": "qwen-plus",
        "object": "chat.completion",
        "service_tier": null,
        "system_fingerprint": null,
        "usage": {
            "completion_tokens": 369,
            "prompt_tokens": 74147,
            "total_tokens": 74516,
            "completion_tokens_details": null,
            "prompt_tokens_details": {
                "audio_tokens": null,
                "cached_tokens": 0
            }
        }
    },
    "usage": {
        "type": "chat",
        "usage": {
            "prompt_tokens": 74147,
            "completion_tokens": 369,
            "total_tokens": 74516
        }
    }
}
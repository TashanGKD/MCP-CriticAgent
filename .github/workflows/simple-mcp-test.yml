name: 🧪 Complete MCP Tool Testing

on:
  workflow_dispatch:
    inputs:
      github_url:
        description: '🎯 GitHub URL of the MCP tool to test'
        required: true
        default: 'https://github.com/upstash/context7'

jobs:
  test-mcp-tool:
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    env:
      # AI模型配置
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
      DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
      DASHSCOPE_BASE_URL: ${{ secrets.DASHSCOPE_BASE_URL }}
      DASHSCOPE_MODEL: ${{ secrets.DASHSCOPE_MODEL }}
      
      # Supabase数据库配置
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      
    - name: Install dependencies
      run: uv sync
        
    - name: 🧪 Complete MCP Tool Testing
      id: test_mcp
      run: |
        GITHUB_URL="${{ github.event.inputs.github_url }}"
        
        echo "🎯 开始完整 MCP 工具测试"
        echo "📍 测试URL: $GITHUB_URL"
        echo "🤖 智能测试模式: 默认启用"
        echo "🗃️ 数据库导出: 默认启用"
        echo "⏱️ 超时时间: 600秒"
        
        # 检查AI配置
        if [ -n "$OPENAI_API_KEY" ] || [ -n "$DASHSCOPE_API_KEY" ]; then
          echo "✅ AI配置已检测到，将使用智能测试模式"
        else
          echo "⚠️ 未检测到AI配置，将禁用智能测试"
          USE_NO_SMART="--no-smart"
        fi
        
        # 检查数据库配置
        if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_ROLE_KEY" ]; then
          echo "✅ Supabase数据库配置已检测到，将启用数据库存储"
          DATABASE_ENABLED="true"
        else
          echo "⚠️ 未检测到Supabase配置，将禁用数据库导出"
          DATABASE_ENABLED="false"
          USE_NO_DB="--no-db-export"
        fi
        
        # 执行完整测试 - 使用新的默认参数（smart、db-export、evaluate默认开启）
        uv run python -m src.main test-url "$GITHUB_URL" --timeout 600 --verbose ${USE_NO_SMART:-} ${USE_NO_DB:-} || {
          echo "❌ 测试失败，但继续生成报告"
          exit_code=$?
        }
        
        # 检查报告生成
        REPORT_DIR="data/test_results"
        if [ -d "$REPORT_DIR" ]; then
          LATEST_JSON=$(ls -t "$REPORT_DIR"/*.json 2>/dev/null | head -1)
          LATEST_HTML=$(ls -t "$REPORT_DIR"/*.html 2>/dev/null | head -1)
          
          if [ -n "$LATEST_JSON" ]; then
            echo "json_report=$LATEST_JSON" >> $GITHUB_OUTPUT
            echo "✅ JSON报告: $LATEST_JSON"
          fi
          
          if [ -n "$LATEST_HTML" ]; then
            echo "html_report=$LATEST_HTML" >> $GITHUB_OUTPUT
            echo "✅ HTML报告: $LATEST_HTML"
          fi
        else
          echo "❌ 未找到报告目录"
        fi
        
        # 输出数据库状态
        echo "database_enabled=$DATABASE_ENABLED" >> $GITHUB_OUTPUT
      
    - name: 📊 Database Storage Verification
      if: always() && steps.test_mcp.outputs.database_enabled == 'true'
      id: verify_database
      run: |
        echo "🔍 验证数据库存储结果..."
        
        # 使用Python脚本验证数据库存储 - 使用实际数据库表结构
        cat > verify_db_storage.py << 'EOF'
        #!/usr/bin/env python3
        import sys
        import os
        
        print(f"🐍 Python版本: {sys.version}")
        print(f"📁 当前工作目录: {os.getcwd()}")
        
        # 检查环境变量
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')
        print(f"🌐 SUPABASE_URL: {'已配置' if supabase_url else '未配置'}")
        print(f"🔑 SUPABASE_SERVICE_ROLE_KEY: {'已配置' if supabase_key else '未配置'}")
        
        if not supabase_url or not supabase_key:
            print("❌ 数据库配置不完整")
            sys.exit(1)
        
        try:
            from supabase import create_client, Client
            print("✅ Supabase库导入成功")
        except ImportError as e:
            print(f"❌ Supabase库导入失败: {e}")
            sys.exit(1)
        
        try:
            from datetime import datetime, timedelta
            import json
            
            # 直接创建Supabase客户端
            client = create_client(supabase_url, supabase_key)
            print("✅ Supabase客户端初始化成功")
            
            # 获取最近5分钟的测试记录 (GitHub Actions执行时间更长)
            recent_cutoff = datetime.now() - timedelta(minutes=5)
            print(f"⏰ 查询时间范围: {recent_cutoff.isoformat()} 至现在")
            
            # 查询mcp_test_results表 - 使用实际的表结构
            result = client.table('mcp_test_results')\
                .select('test_id, test_timestamp, tool_name, tool_author, test_success, deployment_success, communication_success, available_tools_count, test_duration_seconds')\
                .gte('test_timestamp', recent_cutoff.isoformat())\
                .order('test_timestamp', desc=True)\
                .execute()
            
            recent_tests = result.data
            total_recent = len(recent_tests)
            
            # 统计信息
            if total_recent > 0:
                success_count = sum(1 for test in recent_tests if test.get('test_success', False))
                success_rate = (success_count / total_recent) * 100
                deployment_success = sum(1 for test in recent_tests if test.get('deployment_success', False))
                communication_success = sum(1 for test in recent_tests if test.get('communication_success', False))
                
                stats = {
                    'total_recent_tests': total_recent,
                    'successful_tests': success_count,
                    'failed_tests': total_recent - success_count,
                    'success_rate': round(success_rate, 2),
                    'deployment_success_count': deployment_success,
                    'communication_success_count': communication_success,
                    'time_range': f"{recent_cutoff.isoformat()} to {datetime.now().isoformat()}",
                    'recent_tools': list(set(test.get('tool_name', 'Unknown') for test in recent_tests[:10])),
                    'authors': list(set(test.get('tool_author', 'Unknown') for test in recent_tests if test.get('tool_author')))
                }
                
                print("✅ 数据库连接成功")
                print(f"📊 最近5分钟测试记录: {total_recent} 条")
                print(f"📈 总体成功率: {success_count}/{total_recent} ({success_rate:.1f}%)")
                print(f"🚀 部署成功率: {deployment_success}/{total_recent}")
                print(f"📡 通信成功率: {communication_success}/{total_recent}")
                
                # 显示最近测试的工具
                if stats['recent_tools']:
                    print(f"🔧 最近测试的工具: {', '.join(stats['recent_tools'][:3])}")
                
                # 保存统计信息
                with open('db_stats.json', 'w', encoding='utf-8') as f:
                    json.dump(stats, f, ensure_ascii=False, indent=2, default=str)
                
                print(f"✅ 成功从数据库获取 {total_recent} 条最新测试记录")
                sys.exit(0)
            else:
                print("⚠️ 未检测到最近5分钟内的新测试记录")
                
                # 查询总记录数
                total_result = client.table('mcp_test_results').select('test_id', count='exact').execute()
                total_count = len(total_result.data) if total_result.data else 0
                
                stats = {
                    'total_recent_tests': 0,
                    'total_all_tests': total_count,
                    'message': 'No recent tests found, but database connection is working'
                }
                
                with open('db_stats.json', 'w', encoding='utf-8') as f:
                    json.dump(stats, f, ensure_ascii=False, indent=2, default=str)
                
                print(f"📊 数据库总记录数: {total_count}")
                print("✅ 数据库连接正常，但本次测试可能未启用数据库导出")
                sys.exit(0)
                    
        except Exception as e:
            print(f"❌ 数据库操作失败: {e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
        EOF
        
        uv run python verify_db_storage.py || {
          echo "database_verification_failed=true" >> $GITHUB_OUTPUT
          echo "⚠️ 数据库验证失败，但不影响整体测试"
        }
        
        # 保存数据库统计信息为artifact
        if [ -f "db_stats.json" ]; then
          echo "database_stats_available=true" >> $GITHUB_OUTPUT
          echo "✅ 数据库统计信息已生成"
        fi
      
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mcp-test-reports
        path: |
          data/test_results/
          db_stats.json
        retention-days: 30
    
    - name: Check Pages availability
      if: always()
      id: check_pages
      run: |
        # 检查是否可以访问 Pages API
        if curl -s -H "Authorization: token ${{ github.token }}" \
           "https://api.github.com/repos/${{ github.repository }}" | \
           grep -q '"has_pages": true'; then
          echo "pages_available=true" >> $GITHUB_OUTPUT
          echo "✅ Pages 功能可用"
        else
          echo "pages_available=false" >> $GITHUB_OUTPUT
          echo "⚠️ Pages 功能不可用，将跳过 Pages 部署"
        fi

    - name: Setup Pages
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      uses: actions/configure-pages@v4
    
    - name: Prepare site
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      run: |
        mkdir -p _site
        if [ -n "${{ steps.test_mcp.outputs.html_report }}" ] && [ -f "${{ steps.test_mcp.outputs.html_report }}" ]; then
          cp "${{ steps.test_mcp.outputs.html_report }}" _site/index.html
          echo "✅ 使用测试报告作为主页"
        else
          echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>测试结果</title></head><body><h1>MCP工具测试</h1><p>测试未能生成HTML报告，请查看构建产物中的详细日志。</p><p>时间: $(date)</p></body></html>" > _site/index.html
          echo "⚠️ 生成占位页面"
        fi
        
        # 确保目录权限正确
        chmod -R 755 _site

    - name: Upload Pages artifact
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

    - name: Deploy to GitHub Pages
      if: always() && steps.check_pages.outputs.pages_available == 'true'
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true
      
    - name: Pages deployment status
      if: always()
      run: |
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "✅ GitHub Pages 部署成功"
          echo "📄 测试报告地址: ${{ steps.deployment.outputs.page_url }}"
        else
          echo "⚠️ GitHub Pages 部署失败，但不影响测试结果"
          echo "📦 请从构建产物下载完整测试报告"
        fi
        
    - name: Create Summary
      if: always()
      run: |
        echo "# 🧪 MCP工具完整测试结果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**测试URL:** \`${{ github.event.inputs.github_url }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**测试模式:** 完整测试（含AI智能分析）" >> $GITHUB_STEP_SUMMARY
        
        # 添加数据库存储状态
        if [ "${{ steps.test_mcp.outputs.database_enabled }}" = "true" ]; then
          echo "**数据库存储:** ✅ 已启用（Supabase）" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.verify_database.outputs.database_stats_available }}" = "true" ] && [ -f "db_stats.json" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📊 数据库存储统计" >> $GITHUB_STEP_SUMMARY
            
            # 显示数据库统计信息
            if command -v jq >/dev/null 2>&1; then
              # 使用jq解析显示统计信息
              echo "| 统计项 | 数值 |" >> $GITHUB_STEP_SUMMARY
              echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
              
              total_recent=$(jq -r '.total_recent_tests // 0' db_stats.json)
              successful=$(jq -r '.successful_tests // 0' db_stats.json)
              failed=$(jq -r '.failed_tests // 0' db_stats.json)
              success_rate=$(jq -r '.success_rate // "N/A"' db_stats.json)
              
              echo "| 最近测试数 | $total_recent |" >> $GITHUB_STEP_SUMMARY
              echo "| 成功测试数 | $successful |" >> $GITHUB_STEP_SUMMARY
              echo "| 失败测试数 | $failed |" >> $GITHUB_STEP_SUMMARY
              echo "| 成功率 | ${success_rate}% |" >> $GITHUB_STEP_SUMMARY
              
              # 显示最近测试的工具
              tools=$(jq -r '.recent_tools[]?' db_stats.json 2>/dev/null | head -3 | tr '\n' ', ' | sed 's/, $//')
              if [ -n "$tools" ]; then
                echo "| 最近测试工具 | $tools |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              # 否则显示原始JSON内容
              echo "```json" >> $GITHUB_STEP_SUMMARY
              cat db_stats.json >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            fi
            
          elif [ "${{ steps.verify_database.outputs.database_verification_failed }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ 数据库验证失败，可能存在连接问题" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "**数据库存储:** ⚠️ 未启用（缺少Supabase配置）" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查 Pages 部署状态
        if [ "${{ steps.check_pages.outputs.pages_available }}" = "true" ]; then
          if [ "${{ steps.deployment.outcome }}" = "success" ] && [ -n "${{ steps.deployment.outputs.page_url }}" ]; then
            echo "## 🌐 在线测试报告" >> $GITHUB_STEP_SUMMARY
            echo "[点击查看完整报告](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 📄 测试报告" >> $GITHUB_STEP_SUMMARY
            echo "📦 GitHub Pages 部署遇到问题，请从下方构建产物中下载完整报告" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## 📄 测试报告" >> $GITHUB_STEP_SUMMARY
          echo "📦 GitHub Pages 功能不可用，请从下方构建产物中下载完整报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ steps.test_mcp.outputs.json_report }}" ]; then
          echo "## 📊 测试结果文件" >> $GITHUB_STEP_SUMMARY
          echo "- JSON报告: \`${{ steps.test_mcp.outputs.json_report }}\`" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.test_mcp.outputs.html_report }}" ]; then
            echo "- HTML报告: \`${{ steps.test_mcp.outputs.html_report }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.verify_database.outputs.database_stats_available }}" = "true" ]; then
            echo "- 数据库统计: \`db_stats.json\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ 测试状态" >> $GITHUB_STEP_SUMMARY
          echo "测试过程中遇到问题，请查看上方日志了解详情。" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "💾 完整测试数据已作为构建产物保存，可在Actions页面下载。" >> $GITHUB_STEP_SUMMARY
